       # flake8: noqa
       
    1: __docformat__ = "restructuredtext"
       
       # Let users know if they're missing any of our hard dependencies
    1: hard_dependencies = ("numpy", "pytz", "dateutil")
    1: missing_dependencies = []
       
    4: for dependency in hard_dependencies:
    3:     try:
    3:         __import__(dependency)
           except ImportError as e:
               missing_dependencies.append(f"{dependency}: {e}")
       
    1: if missing_dependencies:
           raise ImportError(
               "Unable to import required dependencies:\n" + "\n".join(missing_dependencies)
           )
    1: del hard_dependencies, dependency, missing_dependencies
       
       # numpy compat
    1: from pandas.compat import is_numpy_dev as _is_numpy_dev
       
    1: try:
    1:     from pandas._libs import hashtable as _hashtable, lib as _lib, tslib as _tslib
       except ImportError as err:  # pragma: no cover
           module = err.name
           raise ImportError(
               f"C extension: {module} not built. If you want to import "
               "pandas from the source directory, you may need to run "
               "'python setup.py build_ext --force' to build the C extensions first."
           ) from err
       else:
    1:     del _tslib, _lib, _hashtable
       
    1: from pandas._config import (
           get_option,
           set_option,
           reset_option,
           describe_option,
           option_context,
           options,
       )
       
       # let init-time option registration happen
    1: import pandas.core.config_init
       
    1: from pandas.core.api import (
           # dtype
           Int8Dtype,
           Int16Dtype,
           Int32Dtype,
           Int64Dtype,
           UInt8Dtype,
           UInt16Dtype,
           UInt32Dtype,
           UInt64Dtype,
           Float32Dtype,
           Float64Dtype,
           CategoricalDtype,
           PeriodDtype,
           IntervalDtype,
           DatetimeTZDtype,
           StringDtype,
           BooleanDtype,
           # missing
           NA,
           isna,
           isnull,
           notna,
           notnull,
           # indexes
           Index,
           CategoricalIndex,
           RangeIndex,
           MultiIndex,
           IntervalIndex,
           TimedeltaIndex,
           DatetimeIndex,
           PeriodIndex,
           IndexSlice,
           # tseries
           NaT,
           Period,
           period_range,
           Timedelta,
           timedelta_range,
           Timestamp,
           date_range,
           bdate_range,
           Interval,
           interval_range,
           DateOffset,
           # conversion
           to_numeric,
           to_datetime,
           to_timedelta,
           # misc
           Flags,
           Grouper,
           factorize,
           unique,
           value_counts,
           NamedAgg,
           array,
           Categorical,
           set_eng_float_format,
           Series,
           DataFrame,
       )
       
    1: from pandas.core.arrays.sparse import SparseDtype
       
    1: from pandas.tseries.api import infer_freq
    1: from pandas.tseries import offsets
       
    1: from pandas.core.computation.api import eval
       
    1: from pandas.core.reshape.api import (
           concat,
           lreshape,
           melt,
           wide_to_long,
           merge,
           merge_asof,
           merge_ordered,
           crosstab,
           pivot,
           pivot_table,
           get_dummies,
           cut,
           qcut,
       )
       
    1: from pandas import api, arrays, errors, io, plotting, testing, tseries
    1: from pandas.util._print_versions import show_versions
       
    1: from pandas.io.api import (
           # excel
           ExcelFile,
           ExcelWriter,
           read_excel,
           # parsers
           read_csv,
           read_fwf,
           read_table,
           # pickle
           read_pickle,
           to_pickle,
           # pytables
           HDFStore,
           read_hdf,
           # sql
           read_sql,
           read_sql_query,
           read_sql_table,
           # misc
           read_clipboard,
           read_parquet,
           read_orc,
           read_feather,
           read_gbq,
           read_html,
           read_xml,
           read_json,
           read_stata,
           read_sas,
           read_spss,
       )
       
    1: from pandas.io.json import _json_normalize as json_normalize
       
    1: from pandas.util._tester import test
       
       # use the closest tagged version if possible
    1: from pandas._version import get_versions
       
    1: v = get_versions()
    1: __version__ = v.get("closest-tag", v["version"])
    1: __git_version__ = v.get("full-revisionid")
    1: del get_versions, v
       
       # GH 27101
    1: __deprecated_num_index_names = ["Float64Index", "Int64Index", "UInt64Index"]
       
       
    1: def __dir__():
           # GH43028
           # Int64Index etc. are deprecated, but we still want them to be available in the dir.
           # Remove in Pandas 2.0, when we remove Int64Index etc. from the code base.
           return list(globals().keys()) + __deprecated_num_index_names
       
       
    1: def __getattr__(name):
           import warnings
       
           if name in __deprecated_num_index_names:
               warnings.warn(
                   f"pandas.{name} is deprecated "
                   "and will be removed from pandas in a future version. "
                   "Use pandas.Index with the appropriate dtype instead.",
                   FutureWarning,
                   stacklevel=2,
               )
               from pandas.core.api import Float64Index, Int64Index, UInt64Index
       
               return {
                   "Float64Index": Float64Index,
                   "Int64Index": Int64Index,
                   "UInt64Index": UInt64Index,
               }[name]
           elif name == "datetime":
               warnings.warn(
                   "The pandas.datetime class is deprecated "
                   "and will be removed from pandas in a future version. "
                   "Import from datetime module instead.",
                   FutureWarning,
                   stacklevel=2,
               )
       
               from datetime import datetime as dt
       
               return dt
       
           elif name == "np":
       
               warnings.warn(
                   "The pandas.np module is deprecated "
                   "and will be removed from pandas in a future version. "
                   "Import numpy directly instead.",
                   FutureWarning,
                   stacklevel=2,
               )
               import numpy as np
       
               return np
       
           elif name in {"SparseSeries", "SparseDataFrame"}:
               warnings.warn(
                   f"The {name} class is removed from pandas. Accessing it from "
                   "the top-level namespace will also be removed in the next version.",
                   FutureWarning,
                   stacklevel=2,
               )
       
               return type(name, (), {})
       
           elif name == "SparseArray":
       
               warnings.warn(
                   "The pandas.SparseArray class is deprecated "
                   "and will be removed from pandas in a future version. "
                   "Use pandas.arrays.SparseArray instead.",
                   FutureWarning,
                   stacklevel=2,
               )
               from pandas.core.arrays.sparse import SparseArray as _SparseArray
       
               return _SparseArray
       
           raise AttributeError(f"module 'pandas' has no attribute '{name}'")
       
       
       # module level doc-string
    1: __doc__ = """
       pandas - a powerful data analysis and manipulation library for Python
       =====================================================================
       
       **pandas** is a Python package providing fast, flexible, and expressive data
       structures designed to make working with "relational" or "labeled" data both
       easy and intuitive. It aims to be the fundamental high-level building block for
       doing practical, **real world** data analysis in Python. Additionally, it has
       the broader goal of becoming **the most powerful and flexible open source data
       analysis / manipulation tool available in any language**. It is already well on
       its way toward this goal.
       
       Main Features
       -------------
       Here are just a few of the things that pandas does well:
       
         - Easy handling of missing data in floating point as well as non-floating
           point data.
         - Size mutability: columns can be inserted and deleted from DataFrame and
           higher dimensional objects
         - Automatic and explicit data alignment: objects can be explicitly aligned
           to a set of labels, or the user can simply ignore the labels and let
           `Series`, `DataFrame`, etc. automatically align the data for you in
           computations.
         - Powerful, flexible group by functionality to perform split-apply-combine
           operations on data sets, for both aggregating and transforming data.
         - Make it easy to convert ragged, differently-indexed data in other Python
           and NumPy data structures into DataFrame objects.
         - Intelligent label-based slicing, fancy indexing, and subsetting of large
           data sets.
         - Intuitive merging and joining data sets.
         - Flexible reshaping and pivoting of data sets.
         - Hierarchical labeling of axes (possible to have multiple labels per tick).
         - Robust IO tools for loading data from flat files (CSV and delimited),
           Excel files, databases, and saving/loading data from the ultrafast HDF5
           format.
         - Time series-specific functionality: date range generation and frequency
           conversion, moving window statistics, date shifting and lagging.
       """
       
       # Use __all__ to let type checkers know what is part of the public API.
       # Pandas is not (yet) a py.typed library: the public API is determined
       # based on the documentation.
    1: __all__ = [
    1:     "BooleanDtype",
    1:     "Categorical",
    1:     "CategoricalDtype",
    1:     "CategoricalIndex",
    1:     "DataFrame",
    1:     "DateOffset",
    1:     "DatetimeIndex",
    1:     "DatetimeTZDtype",
    1:     "ExcelFile",
    1:     "ExcelWriter",
    1:     "Flags",
    1:     "Float32Dtype",
    1:     "Float64Dtype",
    1:     "Grouper",
    1:     "HDFStore",
    1:     "Index",
    1:     "IndexSlice",
    1:     "Int16Dtype",
    1:     "Int32Dtype",
    1:     "Int64Dtype",
    1:     "Int8Dtype",
    1:     "Interval",
    1:     "IntervalDtype",
    1:     "IntervalIndex",
    1:     "MultiIndex",
    1:     "NA",
    1:     "NaT",
    1:     "NamedAgg",
    1:     "Period",
    1:     "PeriodDtype",
    1:     "PeriodIndex",
    1:     "RangeIndex",
    1:     "Series",
    1:     "SparseDtype",
    1:     "StringDtype",
    1:     "Timedelta",
    1:     "TimedeltaIndex",
    1:     "Timestamp",
    1:     "UInt16Dtype",
    1:     "UInt32Dtype",
    1:     "UInt64Dtype",
    1:     "UInt8Dtype",
    1:     "api",
    1:     "array",
    1:     "arrays",
    1:     "bdate_range",
    1:     "concat",
    1:     "crosstab",
    1:     "cut",
    1:     "date_range",
    1:     "describe_option",
    1:     "errors",
    1:     "eval",
    1:     "factorize",
    1:     "get_dummies",
    1:     "get_option",
    1:     "infer_freq",
    1:     "interval_range",
    1:     "io",
    1:     "isna",
    1:     "isnull",
    1:     "json_normalize",
    1:     "lreshape",
    1:     "melt",
    1:     "merge",
    1:     "merge_asof",
    1:     "merge_ordered",
    1:     "notna",
    1:     "notnull",
    1:     "offsets",
    1:     "option_context",
    1:     "options",
    1:     "period_range",
    1:     "pivot",
    1:     "pivot_table",
    1:     "plotting",
    1:     "qcut",
    1:     "read_clipboard",
    1:     "read_csv",
    1:     "read_excel",
    1:     "read_feather",
    1:     "read_fwf",
    1:     "read_gbq",
    1:     "read_hdf",
    1:     "read_html",
    1:     "read_json",
    1:     "read_orc",
    1:     "read_parquet",
    1:     "read_pickle",
    1:     "read_sas",
    1:     "read_spss",
    1:     "read_sql",
    1:     "read_sql_query",
    1:     "read_sql_table",
    1:     "read_stata",
    1:     "read_table",
    1:     "read_xml",
    1:     "reset_option",
    1:     "set_eng_float_format",
    1:     "set_option",
    1:     "show_versions",
    1:     "test",
    1:     "testing",
    1:     "timedelta_range",
    1:     "to_datetime",
    1:     "to_numeric",
    1:     "to_pickle",
    1:     "to_timedelta",
    1:     "tseries",
    1:     "unique",
    1:     "value_counts",
    1:     "wide_to_long",
       ]
