    1: import socket
    1: import warnings
       
       
    2: class TransportSocket:
       
    1:     """A socket-like wrapper for exposing real transport sockets.
       
           These objects can be safely returned by APIs like
           `transport.get_extra_info('socket')`.  All potentially disruptive
           operations (like "socket.close()") are banned.
           """
       
    1:     __slots__ = ('_sock',)
       
    1:     def __init__(self, sock: socket.socket):
               self._sock = sock
       
    1:     def _na(self, what):
               warnings.warn(
                   f"Using {what} on sockets returned from get_extra_info('socket') "
                   f"will be prohibited in asyncio 3.9. Please report your use case "
                   f"to bugs.python.org.",
                   DeprecationWarning, source=self)
       
    1:     @property
    1:     def family(self):
               return self._sock.family
       
    1:     @property
    1:     def type(self):
               return self._sock.type
       
    1:     @property
    1:     def proto(self):
               return self._sock.proto
       
    1:     def __repr__(self):
               s = (
                   f"<asyncio.TransportSocket fd={self.fileno()}, "
                   f"family={self.family!s}, type={self.type!s}, "
                   f"proto={self.proto}"
               )
       
               if self.fileno() != -1:
                   try:
                       laddr = self.getsockname()
                       if laddr:
                           s = f"{s}, laddr={laddr}"
                   except socket.error:
                       pass
                   try:
                       raddr = self.getpeername()
                       if raddr:
                           s = f"{s}, raddr={raddr}"
                   except socket.error:
                       pass
       
               return f"{s}>"
       
    1:     def __getstate__(self):
               raise TypeError("Cannot serialize asyncio.TransportSocket object")
       
    1:     def fileno(self):
               return self._sock.fileno()
       
    1:     def dup(self):
               return self._sock.dup()
       
    1:     def get_inheritable(self):
               return self._sock.get_inheritable()
       
    1:     def shutdown(self, how):
               # asyncio doesn't currently provide a high-level transport API
               # to shutdown the connection.
               self._sock.shutdown(how)
       
    1:     def getsockopt(self, *args, **kwargs):
               return self._sock.getsockopt(*args, **kwargs)
       
    1:     def setsockopt(self, *args, **kwargs):
               self._sock.setsockopt(*args, **kwargs)
       
    1:     def getpeername(self):
               return self._sock.getpeername()
       
    1:     def getsockname(self):
               return self._sock.getsockname()
       
    1:     def getsockbyname(self):
               return self._sock.getsockbyname()
       
    1:     def accept(self):
               self._na('accept() method')
               return self._sock.accept()
       
    1:     def connect(self, *args, **kwargs):
               self._na('connect() method')
               return self._sock.connect(*args, **kwargs)
       
    1:     def connect_ex(self, *args, **kwargs):
               self._na('connect_ex() method')
               return self._sock.connect_ex(*args, **kwargs)
       
    1:     def bind(self, *args, **kwargs):
               self._na('bind() method')
               return self._sock.bind(*args, **kwargs)
       
    1:     def ioctl(self, *args, **kwargs):
               self._na('ioctl() method')
               return self._sock.ioctl(*args, **kwargs)
       
    1:     def listen(self, *args, **kwargs):
               self._na('listen() method')
               return self._sock.listen(*args, **kwargs)
       
    1:     def makefile(self):
               self._na('makefile() method')
               return self._sock.makefile()
       
    1:     def sendfile(self, *args, **kwargs):
               self._na('sendfile() method')
               return self._sock.sendfile(*args, **kwargs)
       
    1:     def close(self):
               self._na('close() method')
               return self._sock.close()
       
    1:     def detach(self):
               self._na('detach() method')
               return self._sock.detach()
       
    1:     def sendmsg_afalg(self, *args, **kwargs):
               self._na('sendmsg_afalg() method')
               return self._sock.sendmsg_afalg(*args, **kwargs)
       
    1:     def sendmsg(self, *args, **kwargs):
               self._na('sendmsg() method')
               return self._sock.sendmsg(*args, **kwargs)
       
    1:     def sendto(self, *args, **kwargs):
               self._na('sendto() method')
               return self._sock.sendto(*args, **kwargs)
       
    1:     def send(self, *args, **kwargs):
               self._na('send() method')
               return self._sock.send(*args, **kwargs)
       
    1:     def sendall(self, *args, **kwargs):
               self._na('sendall() method')
               return self._sock.sendall(*args, **kwargs)
       
    1:     def set_inheritable(self, *args, **kwargs):
               self._na('set_inheritable() method')
               return self._sock.set_inheritable(*args, **kwargs)
       
    1:     def share(self, process_id):
               self._na('share() method')
               return self._sock.share(process_id)
       
    1:     def recv_into(self, *args, **kwargs):
               self._na('recv_into() method')
               return self._sock.recv_into(*args, **kwargs)
       
    1:     def recvfrom_into(self, *args, **kwargs):
               self._na('recvfrom_into() method')
               return self._sock.recvfrom_into(*args, **kwargs)
       
    1:     def recvmsg_into(self, *args, **kwargs):
               self._na('recvmsg_into() method')
               return self._sock.recvmsg_into(*args, **kwargs)
       
    1:     def recvmsg(self, *args, **kwargs):
               self._na('recvmsg() method')
               return self._sock.recvmsg(*args, **kwargs)
       
    1:     def recvfrom(self, *args, **kwargs):
               self._na('recvfrom() method')
               return self._sock.recvfrom(*args, **kwargs)
       
    1:     def recv(self, *args, **kwargs):
               self._na('recv() method')
               return self._sock.recv(*args, **kwargs)
       
    1:     def settimeout(self, value):
               if value == 0:
                   return
               raise ValueError(
                   'settimeout(): only 0 timeout is allowed on transport sockets')
       
    1:     def gettimeout(self):
               return 0
       
    1:     def setblocking(self, flag):
               if not flag:
                   return
               raise ValueError(
                   'setblocking(): transport sockets cannot be blocking')
       
    1:     def __enter__(self):
               self._na('context manager protocol')
               return self._sock.__enter__()
       
    1:     def __exit__(self, *err):
               self._na('context manager protocol')
               return self._sock.__exit__(*err)
