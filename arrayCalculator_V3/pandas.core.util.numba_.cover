    1: """Common utilities for Numba operations"""
    1: from __future__ import annotations
       
    1: import types
    1: from typing import (
           TYPE_CHECKING,
           Callable,
       )
       
    1: import numpy as np
       
    1: from pandas.compat._optional import import_optional_dependency
    1: from pandas.errors import NumbaUtilError
       
    1: GLOBAL_USE_NUMBA: bool = False
    1: NUMBA_FUNC_CACHE: dict[tuple[Callable, str], Callable] = {}
       
       
    1: def maybe_use_numba(engine: str | None) -> bool:
           """Signal whether to use numba routines."""
           return engine == "numba" or (engine is None and GLOBAL_USE_NUMBA)
       
       
    1: def set_use_numba(enable: bool = False) -> None:
           global GLOBAL_USE_NUMBA
           if enable:
               import_optional_dependency("numba")
           GLOBAL_USE_NUMBA = enable
       
       
    1: def get_jit_arguments(
           engine_kwargs: dict[str, bool] | None = None, kwargs: dict | None = None
       ) -> tuple[bool, bool, bool]:
           """
           Return arguments to pass to numba.JIT, falling back on pandas default JIT settings.
       
           Parameters
           ----------
           engine_kwargs : dict, default None
               user passed keyword arguments for numba.JIT
           kwargs : dict, default None
               user passed keyword arguments to pass into the JITed function
       
           Returns
           -------
           (bool, bool, bool)
               nopython, nogil, parallel
       
           Raises
           ------
           NumbaUtilError
           """
           if engine_kwargs is None:
               engine_kwargs = {}
       
           nopython = engine_kwargs.get("nopython", True)
           if kwargs and nopython:
               raise NumbaUtilError(
                   "numba does not support kwargs with nopython=True: "
                   "https://github.com/numba/numba/issues/2916"
               )
           nogil = engine_kwargs.get("nogil", False)
           parallel = engine_kwargs.get("parallel", False)
           return nopython, nogil, parallel
       
       
    1: def jit_user_function(
           func: Callable, nopython: bool, nogil: bool, parallel: bool
       ) -> Callable:
           """
           JIT the user's function given the configurable arguments.
       
           Parameters
           ----------
           func : function
               user defined function
           nopython : bool
               nopython parameter for numba.JIT
           nogil : bool
               nogil parameter for numba.JIT
           parallel : bool
               parallel parameter for numba.JIT
       
           Returns
           -------
           function
               Numba JITed function
           """
           if TYPE_CHECKING:
               import numba
           else:
               numba = import_optional_dependency("numba")
       
           if numba.extending.is_jitted(func):
               # Don't jit a user passed jitted function
               numba_func = func
           else:
       
               @numba.generated_jit(nopython=nopython, nogil=nogil, parallel=parallel)
               def numba_func(data, *_args):
                   if getattr(np, func.__name__, False) is func or isinstance(
                       func, types.BuiltinFunctionType
                   ):
                       jf = func
                   else:
                       jf = numba.jit(func, nopython=nopython, nogil=nogil)
       
                   def impl(data, *_args):
                       return jf(data, *_args)
       
                   return impl
       
           return numba_func
