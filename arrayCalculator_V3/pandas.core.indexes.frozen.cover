    1: """
       frozen (immutable) data structures to support MultiIndexing
       
       These are used for:
       
       - .names (FrozenList)
       
       """
    1: from __future__ import annotations
       
    1: from typing import Any
       
    1: from pandas.core.base import PandasObject
       
    1: from pandas.io.formats.printing import pprint_thing
       
       
    2: class FrozenList(PandasObject, list):
    1:     """
           Container that doesn't allow setting item *but*
           because it's technically non-hashable, will be used
           for lookups, appropriately, etc.
           """
       
           # Side note: This has to be of type list. Otherwise,
           #            it messes up PyTables type checks.
       
    1:     def union(self, other) -> FrozenList:
               """
               Returns a FrozenList with other concatenated to the end of self.
       
               Parameters
               ----------
               other : array-like
                   The array-like whose elements we are concatenating.
       
               Returns
               -------
               FrozenList
                   The collection difference between self and other.
               """
               if isinstance(other, tuple):
                   other = list(other)
               return type(self)(super().__add__(other))
       
    1:     def difference(self, other) -> FrozenList:
               """
               Returns a FrozenList with elements from other removed from self.
       
               Parameters
               ----------
               other : array-like
                   The array-like whose elements we are removing self.
       
               Returns
               -------
               FrozenList
                   The collection difference between self and other.
               """
               other = set(other)
               temp = [x for x in self if x not in other]
               return type(self)(temp)
       
           # TODO: Consider deprecating these in favor of `union` (xref gh-15506)
    1:     __add__ = __iadd__ = union
       
    1:     def __getitem__(self, n):
  720:         if isinstance(n, slice):
                   return type(self)(super().__getitem__(n))
  720:         return super().__getitem__(n)
       
    1:     def __radd__(self, other):
               if isinstance(other, tuple):
                   other = list(other)
               return type(self)(other + list(self))
       
    1:     def __eq__(self, other: Any) -> bool:
               if isinstance(other, (tuple, FrozenList)):
                   other = list(other)
               return super().__eq__(other)
       
    1:     __req__ = __eq__
       
    1:     def __mul__(self, other):
               return type(self)(super().__mul__(other))
       
    1:     __imul__ = __mul__
       
    1:     def __reduce__(self):
               return type(self), (list(self),)
       
    1:     def __hash__(self):
               return hash(tuple(self))
       
    1:     def _disabled(self, *args, **kwargs):
               """
               This method will not function because object is immutable.
               """
               raise TypeError(f"'{type(self).__name__}' does not support mutable operations.")
       
    1:     def __str__(self) -> str:
               return pprint_thing(self, quote_strings=True, escape_chars=("\t", "\r", "\n"))
       
    1:     def __repr__(self) -> str:
               return f"{type(self).__name__}({str(self)})"
       
    1:     __setitem__ = __setslice__ = _disabled  # type: ignore[assignment]
    1:     __delitem__ = __delslice__ = _disabled
    1:     pop = append = extend = _disabled
    1:     remove = sort = insert = _disabled  # type: ignore[assignment]
