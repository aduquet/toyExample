    1: """
       missing types & inference
       """
    1: from __future__ import annotations
       
    1: from decimal import Decimal
    1: from functools import partial
       
    1: import numpy as np
       
    1: from pandas._config import get_option
       
    1: from pandas._libs import lib
    1: import pandas._libs.missing as libmissing
    1: from pandas._libs.tslibs import (
           NaT,
           iNaT,
       )
    1: from pandas._typing import (
           ArrayLike,
           DtypeObj,
           npt,
       )
       
    1: from pandas.core.dtypes.common import (
           DT64NS_DTYPE,
           TD64NS_DTYPE,
           ensure_object,
           is_bool_dtype,
           is_categorical_dtype,
           is_complex_dtype,
           is_datetimelike_v_numeric,
           is_dtype_equal,
           is_extension_array_dtype,
           is_float_dtype,
           is_integer_dtype,
           is_object_dtype,
           is_scalar,
           is_string_or_object_np_dtype,
           needs_i8_conversion,
       )
    1: from pandas.core.dtypes.dtypes import (
           CategoricalDtype,
           ExtensionDtype,
           IntervalDtype,
           PeriodDtype,
       )
    1: from pandas.core.dtypes.generic import (
           ABCDataFrame,
           ABCExtensionArray,
           ABCIndex,
           ABCMultiIndex,
           ABCSeries,
       )
    1: from pandas.core.dtypes.inference import is_list_like
       
    1: isposinf_scalar = libmissing.isposinf_scalar
    1: isneginf_scalar = libmissing.isneginf_scalar
       
    1: nan_checker = np.isnan
    1: INF_AS_NA = False
    1: _dtype_object = np.dtype("object")
    1: _dtype_str = np.dtype(str)
       
       
    1: def isna(obj):
           """
           Detect missing values for an array-like object.
       
           This function takes a scalar or array-like object and indicates
           whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``
           in object arrays, ``NaT`` in datetimelike).
       
           Parameters
           ----------
           obj : scalar or array-like
               Object to check for null or missing values.
       
           Returns
           -------
           bool or array-like of bool
               For scalar input, returns a scalar boolean.
               For array input, returns an array of boolean indicating whether each
               corresponding element is missing.
       
           See Also
           --------
           notna : Boolean inverse of pandas.isna.
           Series.isna : Detect missing values in a Series.
           DataFrame.isna : Detect missing values in a DataFrame.
           Index.isna : Detect missing values in an Index.
       
           Examples
           --------
           Scalar arguments (including strings) result in a scalar boolean.
       
           >>> pd.isna('dog')
           False
       
           >>> pd.isna(pd.NA)
           True
       
           >>> pd.isna(np.nan)
           True
       
           ndarrays result in an ndarray of booleans.
       
           >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])
           >>> array
           array([[ 1., nan,  3.],
                  [ 4.,  5., nan]])
           >>> pd.isna(array)
           array([[False,  True, False],
                  [False, False,  True]])
       
           For indexes, an ndarray of booleans is returned.
       
           >>> index = pd.DatetimeIndex(["2017-07-05", "2017-07-06", None,
           ...                           "2017-07-08"])
           >>> index
           DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],
                         dtype='datetime64[ns]', freq=None)
           >>> pd.isna(index)
           array([False, False,  True, False])
       
           For Series and DataFrame, the same type is returned, containing booleans.
       
           >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])
           >>> df
                0     1    2
           0  ant   bee  cat
           1  dog  None  fly
           >>> pd.isna(df)
                  0      1      2
           0  False  False  False
           1  False   True  False
       
           >>> pd.isna(df[1])
           0    False
           1     True
           Name: 1, dtype: bool
           """
 1972:     return _isna(obj)
       
       
    1: isnull = isna
       
       
    1: def _isna(obj, inf_as_na: bool = False):
           """
           Detect missing values, treating None, NaN or NA as null. Infinite
           values will also be treated as null if inf_as_na is True.
       
           Parameters
           ----------
           obj: ndarray or object value
               Input array or scalar value.
           inf_as_na: bool
               Whether to treat infinity as null.
       
           Returns
           -------
           boolean ndarray or boolean
           """
 1972:     if is_scalar(obj):
  186:         return libmissing.checknull(obj, inf_as_na=inf_as_na)
 1786:     elif isinstance(obj, ABCMultiIndex):
               raise NotImplementedError("isna is not defined for MultiIndex")
 1786:     elif isinstance(obj, type):
               return False
 1786:     elif isinstance(obj, (np.ndarray, ABCExtensionArray)):
 1426:         return _isna_array(obj, inf_as_na=inf_as_na)
  360:     elif isinstance(obj, ABCIndex):
               # Try to use cached isna, which also short-circuits for integer dtypes
               #  and avoids materializing RangeIndex._values
  360:         if not obj._can_hold_na:
  180:             return obj.isna()
  180:         return _isna_array(obj._values, inf_as_na=inf_as_na)
       
           elif isinstance(obj, ABCSeries):
               result = _isna_array(obj._values, inf_as_na=inf_as_na)
               # box
               result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)
               return result
           elif isinstance(obj, ABCDataFrame):
               return obj.isna()
           elif isinstance(obj, list):
               return _isna_array(np.asarray(obj, dtype=object), inf_as_na=inf_as_na)
           elif hasattr(obj, "__array__"):
               return _isna_array(np.asarray(obj), inf_as_na=inf_as_na)
           else:
               return False
       
       
    1: def _use_inf_as_na(key):
           """
           Option change callback for na/inf behaviour.
       
           Choose which replacement for numpy.isnan / -numpy.isfinite is used.
       
           Parameters
           ----------
           flag: bool
               True means treat None, NaN, INF, -INF as null (old way),
               False means None and NaN are null, but INF, -INF are not null
               (new way).
       
           Notes
           -----
           This approach to setting global module values is discussed and
           approved here:
       
           * https://stackoverflow.com/questions/4859217/
             programmatically-creating-variables-in-python/4859312#4859312
           """
           inf_as_na = get_option(key)
           globals()["_isna"] = partial(_isna, inf_as_na=inf_as_na)
           if inf_as_na:
               globals()["nan_checker"] = lambda x: ~np.isfinite(x)
               globals()["INF_AS_NA"] = True
           else:
               globals()["nan_checker"] = np.isnan
               globals()["INF_AS_NA"] = False
       
       
    1: def _isna_array(values: ArrayLike, inf_as_na: bool = False):
           """
           Return an array indicating which values of the input array are NaN / NA.
       
           Parameters
           ----------
           obj: ndarray or ExtensionArray
               The input array whose elements are to be checked.
           inf_as_na: bool
               Whether or not to treat infinite values as NA.
       
           Returns
           -------
           array-like
               Array of boolean values denoting the NA status of each element.
           """
 1606:     dtype = values.dtype
       
 1606:     if not isinstance(values, np.ndarray):
               # i.e. ExtensionArray
               if inf_as_na and is_categorical_dtype(dtype):
                   result = libmissing.isnaobj(values.to_numpy(), inf_as_na=inf_as_na)
               else:
                   # error: Incompatible types in assignment (expression has type
                   # "Union[ndarray[Any, Any], ExtensionArraySupportsAnyAll]", variable has
                   # type "ndarray[Any, dtype[bool_]]")
                   result = values.isna()  # type: ignore[assignment]
 1606:     elif is_string_or_object_np_dtype(values.dtype):
  540:         result = _isna_string_dtype(values, inf_as_na=inf_as_na)
 1066:     elif needs_i8_conversion(dtype):
               # this is the NaT pattern
               result = values.view("i8") == iNaT
           else:
 1066:         if inf_as_na:
                   result = ~np.isfinite(values)
               else:
 1066:             result = np.isnan(values)
       
 1606:     return result
       
       
    1: def _isna_string_dtype(values: np.ndarray, inf_as_na: bool) -> npt.NDArray[np.bool_]:
           # Working around NumPy ticket 1542
  540:     dtype = values.dtype
       
  540:     if dtype.kind in ("S", "U"):
               result = np.zeros(values.shape, dtype=bool)
           else:
       
  540:         if values.ndim == 1:
  180:             result = libmissing.isnaobj(values, inf_as_na=inf_as_na)
  360:         elif values.ndim == 2:
  360:             result = libmissing.isnaobj2d(values, inf_as_na=inf_as_na)
               else:
                   # 0-D, reached via e.g. mask_missing
                   result = libmissing.isnaobj(values.ravel(), inf_as_na=inf_as_na)
                   result = result.reshape(values.shape)
       
  540:     return result
       
       
    1: def notna(obj):
           """
           Detect non-missing values for an array-like object.
       
           This function takes a scalar or array-like object and indicates
           whether values are valid (not missing, which is ``NaN`` in numeric
           arrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).
       
           Parameters
           ----------
           obj : array-like or object value
               Object to check for *not* null or *non*-missing values.
       
           Returns
           -------
           bool or array-like of bool
               For scalar input, returns a scalar boolean.
               For array input, returns an array of boolean indicating whether each
               corresponding element is valid.
       
           See Also
           --------
           isna : Boolean inverse of pandas.notna.
           Series.notna : Detect valid values in a Series.
           DataFrame.notna : Detect valid values in a DataFrame.
           Index.notna : Detect valid values in an Index.
       
           Examples
           --------
           Scalar arguments (including strings) result in a scalar boolean.
       
           >>> pd.notna('dog')
           True
       
           >>> pd.notna(pd.NA)
           False
       
           >>> pd.notna(np.nan)
           False
       
           ndarrays result in an ndarray of booleans.
       
           >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])
           >>> array
           array([[ 1., nan,  3.],
                  [ 4.,  5., nan]])
           >>> pd.notna(array)
           array([[ True, False,  True],
                  [ True,  True, False]])
       
           For indexes, an ndarray of booleans is returned.
       
           >>> index = pd.DatetimeIndex(["2017-07-05", "2017-07-06", None,
           ...                          "2017-07-08"])
           >>> index
           DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],
                         dtype='datetime64[ns]', freq=None)
           >>> pd.notna(index)
           array([ True,  True, False,  True])
       
           For Series and DataFrame, the same type is returned, containing booleans.
       
           >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])
           >>> df
                0     1    2
           0  ant   bee  cat
           1  dog  None  fly
           >>> pd.notna(df)
                 0      1     2
           0  True   True  True
           1  True  False  True
       
           >>> pd.notna(df[1])
           0     True
           1    False
           Name: 1, dtype: bool
           """
           res = isna(obj)
           if is_scalar(res):
               return not res
           return ~res
       
       
    1: notnull = notna
       
       
    1: def isna_compat(arr, fill_value=np.nan) -> bool:
           """
           Parameters
           ----------
           arr: a numpy array
           fill_value: fill value, default to np.nan
       
           Returns
           -------
           True if we can fill using this fill_value
           """
           if isna(fill_value):
               dtype = arr.dtype
               return not (is_bool_dtype(dtype) or is_integer_dtype(dtype))
           return True
       
       
    1: def array_equivalent(
           left,
           right,
           strict_nan: bool = False,
           dtype_equal: bool = False,
       ) -> bool:
           """
           True if two arrays, left and right, have equal non-NaN elements, and NaNs
           in corresponding locations.  False otherwise. It is assumed that left and
           right are NumPy arrays of the same dtype. The behavior of this function
           (particularly with respect to NaNs) is not defined if the dtypes are
           different.
       
           Parameters
           ----------
           left, right : ndarrays
           strict_nan : bool, default False
               If True, consider NaN and None to be different.
           dtype_equal : bool, default False
               Whether `left` and `right` are known to have the same dtype
               according to `is_dtype_equal`. Some methods like `BlockManager.equals`.
               require that the dtypes match. Setting this to ``True`` can improve
               performance, but will give different results for arrays that are
               equal but different dtypes.
       
           Returns
           -------
           b : bool
               Returns True if the arrays are equivalent.
       
           Examples
           --------
           >>> array_equivalent(
           ...     np.array([1, 2, np.nan]),
           ...     np.array([1, 2, np.nan]))
           True
           >>> array_equivalent(
           ...     np.array([1, np.nan, 2]),
           ...     np.array([1, 2, np.nan]))
           False
           """
 1438:     left, right = np.asarray(left), np.asarray(right)
       
           # shape compat
 1438:     if left.shape != right.shape:
  181:         return False
       
 1257:     if dtype_equal:
               # fastpath when we require that the dtypes match (Block.equals)
               if left.dtype.kind in ["f", "c"]:
                   return _array_equivalent_float(left, right)
               elif is_datetimelike_v_numeric(left.dtype, right.dtype):
                   return False
               elif needs_i8_conversion(left.dtype):
                   return _array_equivalent_datetimelike(left, right)
               elif is_string_or_object_np_dtype(left.dtype):
                   # TODO: fastpath for pandas' StringDtype
                   return _array_equivalent_object(left, right, strict_nan)
               else:
                   return np.array_equal(left, right)
       
           # Slow path when we allow comparing different dtypes.
           # Object arrays can contain None, NaN and NaT.
           # string dtypes must be come to this path for NumPy 1.7.1 compat
 1257:     if left.dtype.kind in "OSU" or right.dtype.kind in "OSU":
               # Note: `in "OSU"` is non-trivially faster than `in ["O", "S", "U"]`
               #  or `in ("O", "S", "U")`
 1257:         return _array_equivalent_object(left, right, strict_nan)
       
           # NaNs can occur in float and complex arrays.
           if is_float_dtype(left.dtype) or is_complex_dtype(left.dtype):
               if not (left.size and right.size):
                   return True
               return ((left == right) | (isna(left) & isna(right))).all()
       
           elif is_datetimelike_v_numeric(left, right):
               # GH#29553 avoid numpy deprecation warning
               return False
       
           elif needs_i8_conversion(left.dtype) or needs_i8_conversion(right.dtype):
               # datetime64, timedelta64, Period
               if not is_dtype_equal(left.dtype, right.dtype):
                   return False
       
               left = left.view("i8")
               right = right.view("i8")
       
           # if we have structured dtypes, compare first
           if (
               left.dtype.type is np.void or right.dtype.type is np.void
           ) and left.dtype != right.dtype:
               return False
       
           return np.array_equal(left, right)
       
       
    1: def _array_equivalent_float(left, right) -> bool:
           return bool(((left == right) | (np.isnan(left) & np.isnan(right))).all())
       
       
    1: def _array_equivalent_datetimelike(left, right):
           return np.array_equal(left.view("i8"), right.view("i8"))
       
       
    1: def _array_equivalent_object(left: np.ndarray, right: np.ndarray, strict_nan: bool):
 1257:     if not strict_nan:
               # isna considers NaN and None to be equivalent.
       
 1257:         if left.flags["F_CONTIGUOUS"] and right.flags["F_CONTIGUOUS"]:
                   # we can improve performance by doing a copy-free ravel
                   # e.g. in frame_methods.Equals.time_frame_nonunique_equal
                   #  if we transposed the frames
 1257:             left = left.ravel("K")
 1257:             right = right.ravel("K")
       
 2514:         return lib.array_equivalent_object(
 1257:             ensure_object(left.ravel()), ensure_object(right.ravel())
               )
       
           for left_value, right_value in zip(left, right):
               if left_value is NaT and right_value is not NaT:
                   return False
       
               elif left_value is libmissing.NA and right_value is not libmissing.NA:
                   return False
       
               elif isinstance(left_value, float) and np.isnan(left_value):
                   if not isinstance(right_value, float) or not np.isnan(right_value):
                       return False
               else:
                   try:
                       if np.any(np.asarray(left_value != right_value)):
                           return False
                   except TypeError as err:
                       if "boolean value of NA is ambiguous" in str(err):
                           return False
                       raise
           return True
       
       
    1: def array_equals(left: ArrayLike, right: ArrayLike) -> bool:
           """
           ExtensionArray-compatible implementation of array_equivalent.
           """
           if not is_dtype_equal(left.dtype, right.dtype):
               return False
           elif isinstance(left, ABCExtensionArray):
               return left.equals(right)
           else:
               return array_equivalent(left, right, dtype_equal=True)
       
       
    1: def infer_fill_value(val):
           """
           infer the fill value for the nan/NaT from the provided
           scalar/ndarray/list-like if we are a NaT, return the correct dtyped
           element to provide proper block construction
           """
           if not is_list_like(val):
               val = [val]
           val = np.array(val, copy=False)
           if needs_i8_conversion(val.dtype):
               return np.array("NaT", dtype=val.dtype)
           elif is_object_dtype(val.dtype):
               dtype = lib.infer_dtype(ensure_object(val), skipna=False)
               if dtype in ["datetime", "datetime64"]:
                   return np.array("NaT", dtype=DT64NS_DTYPE)
               elif dtype in ["timedelta", "timedelta64"]:
                   return np.array("NaT", dtype=TD64NS_DTYPE)
           return np.nan
       
       
    1: def maybe_fill(arr: np.ndarray) -> np.ndarray:
           """
           Fill numpy.ndarray with NaN, unless we have a integer or boolean dtype.
           """
           if arr.dtype.kind not in ("u", "i", "b"):
               arr.fill(np.nan)
           return arr
       
       
    1: def na_value_for_dtype(dtype: DtypeObj, compat: bool = True):
           """
           Return a dtype compat na value
       
           Parameters
           ----------
           dtype : string / dtype
           compat : bool, default True
       
           Returns
           -------
           np.dtype or a pandas dtype
       
           Examples
           --------
           >>> na_value_for_dtype(np.dtype('int64'))
           0
           >>> na_value_for_dtype(np.dtype('int64'), compat=False)
           nan
           >>> na_value_for_dtype(np.dtype('float64'))
           nan
           >>> na_value_for_dtype(np.dtype('bool'))
           False
           >>> na_value_for_dtype(np.dtype('datetime64[ns]'))
           numpy.datetime64('NaT')
           """
       
 1248:     if isinstance(dtype, ExtensionDtype):
               return dtype.na_value
 1248:     elif needs_i8_conversion(dtype):
               return dtype.type("NaT", "ns")
 1248:     elif is_float_dtype(dtype):
  175:         return np.nan
 1073:     elif is_integer_dtype(dtype):
  533:         if compat:
                   return 0
  533:         return np.nan
  540:     elif is_bool_dtype(dtype):
  180:         if compat:
                   return False
  180:         return np.nan
  360:     return np.nan
       
       
    1: def remove_na_arraylike(arr):
           """
           Return array-like containing only true/non-NaN values, possibly empty.
           """
           if is_extension_array_dtype(arr):
               return arr[notna(arr)]
           else:
               return arr[notna(np.asarray(arr))]
       
       
    1: def is_valid_na_for_dtype(obj, dtype: DtypeObj) -> bool:
           """
           isna check that excludes incompatible dtypes
       
           Parameters
           ----------
           obj : object
           dtype : np.datetime64, np.timedelta64, DatetimeTZDtype, or PeriodDtype
       
           Returns
           -------
           bool
           """
    4:     if not lib.is_scalar(obj) or not isna(obj):
               return False
    4:     elif dtype.kind == "M":
               if isinstance(dtype, np.dtype):
                   # i.e. not tzaware
                   return not isinstance(obj, (np.timedelta64, Decimal))
               # we have to rule out tznaive dt64("NaT")
               return not isinstance(obj, (np.timedelta64, np.datetime64, Decimal))
    4:     elif dtype.kind == "m":
               return not isinstance(obj, (np.datetime64, Decimal))
    4:     elif dtype.kind in ["i", "u", "f", "c"]:
               # Numeric
    2:         return obj is not NaT and not isinstance(obj, (np.datetime64, np.timedelta64))
       
    2:     elif dtype == _dtype_str:
               # numpy string dtypes to avoid float np.nan
               return not isinstance(obj, (np.datetime64, np.timedelta64, Decimal, float))
       
    2:     elif dtype == _dtype_object:
               # This is needed for Categorical, but is kind of weird
    1:         return True
       
    1:     elif isinstance(dtype, PeriodDtype):
               return not isinstance(obj, (np.datetime64, np.timedelta64, Decimal))
       
    1:     elif isinstance(dtype, IntervalDtype):
               return lib.is_float(obj) or obj is None or obj is libmissing.NA
       
    1:     elif isinstance(dtype, CategoricalDtype):
               return is_valid_na_for_dtype(obj, dtype.categories.dtype)
       
           # fallback, default to allowing NaN, None, NA, NaT
    1:     return not isinstance(obj, (np.datetime64, np.timedelta64, Decimal))
