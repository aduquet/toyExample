    1: """
       Engine classes for :func:`~pandas.eval`
       """
    1: from __future__ import annotations
       
    1: import abc
       
    1: from pandas.core.computation.align import (
           align_terms,
           reconstruct_object,
       )
    1: from pandas.core.computation.expr import Expr
    1: from pandas.core.computation.ops import (
           MATHOPS,
           REDUCTIONS,
       )
       
    1: import pandas.io.formats.printing as printing
       
    1: _ne_builtins = frozenset(MATHOPS + REDUCTIONS)
       
       
    2: class NumExprClobberingError(NameError):
    1:     pass
       
       
    1: def _check_ne_builtin_clash(expr: Expr) -> None:
           """
           Attempt to prevent foot-shooting in a helpful way.
       
           Parameters
           ----------
           expr : Expr
               Terms can contain
           """
           names = expr.names
           overlap = names & _ne_builtins
       
           if overlap:
               s = ", ".join([repr(x) for x in overlap])
               raise NumExprClobberingError(
                   f'Variables in expression "{expr}" overlap with builtins: ({s})'
               )
       
       
    2: class AbstractEngine(metaclass=abc.ABCMeta):
    1:     """Object serving as a base class for all engines."""
       
    1:     has_neg_frac = False
       
    1:     def __init__(self, expr):
               self.expr = expr
               self.aligned_axes = None
               self.result_type = None
       
    1:     def convert(self) -> str:
               """
               Convert an expression for evaluation.
       
               Defaults to return the expression as a string.
               """
               return printing.pprint_thing(self.expr)
       
    1:     def evaluate(self) -> object:
               """
               Run the engine on the expression.
       
               This method performs alignment which is necessary no matter what engine
               is being used, thus its implementation is in the base class.
       
               Returns
               -------
               object
                   The result of the passed expression.
               """
               if not self._is_aligned:
                   self.result_type, self.aligned_axes = align_terms(self.expr.terms)
       
               # make sure no names in resolvers and locals/globals clash
               res = self._evaluate()
               return reconstruct_object(
                   self.result_type, res, self.aligned_axes, self.expr.terms.return_type
               )
       
    1:     @property
    1:     def _is_aligned(self) -> bool:
               return self.aligned_axes is not None and self.result_type is not None
       
    1:     @abc.abstractmethod
    1:     def _evaluate(self):
               """
               Return an evaluated expression.
       
               Parameters
               ----------
               env : Scope
                   The local and global environment in which to evaluate an
                   expression.
       
               Notes
               -----
               Must be implemented by subclasses.
               """
               pass
       
       
    2: class NumExprEngine(AbstractEngine):
    1:     """NumExpr engine class"""
       
    1:     has_neg_frac = True
       
    1:     def _evaluate(self):
               import numexpr as ne
       
               # convert the expression to a valid numexpr expression
               s = self.convert()
       
               env = self.expr.env
               scope = env.full_scope
               _check_ne_builtin_clash(self.expr)
               return ne.evaluate(s, local_dict=scope)
       
       
    2: class PythonEngine(AbstractEngine):
    1:     """
           Evaluate an expression in Python space.
       
           Mostly for testing purposes.
           """
       
    1:     has_neg_frac = False
       
    1:     def evaluate(self):
               return self.expr()
       
    1:     def _evaluate(self) -> None:
               pass
       
       
    1: ENGINES: dict[str, type[AbstractEngine]] = {
    1:     "numexpr": NumExprEngine,
    1:     "python": PythonEngine,
       }
