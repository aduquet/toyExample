    1: from __future__ import annotations
       
    1: import functools
    1: from typing import (
           TYPE_CHECKING,
           cast,
           overload,
       )
       
    1: import numpy as np
       
    1: from pandas._libs import (
           algos as libalgos,
           lib,
       )
    1: from pandas._typing import (
           ArrayLike,
           npt,
       )
       
    1: from pandas.core.dtypes.cast import maybe_promote
    1: from pandas.core.dtypes.common import (
           ensure_platform_int,
           is_1d_only_ea_obj,
       )
    1: from pandas.core.dtypes.missing import na_value_for_dtype
       
    1: from pandas.core.construction import ensure_wrapped_if_datetimelike
       
    1: if TYPE_CHECKING:
           from pandas.core.arrays._mixins import NDArrayBackedExtensionArray
           from pandas.core.arrays.base import ExtensionArray
       
       
    1: @overload
    1: def take_nd(
           arr: np.ndarray,
           indexer,
           axis: int = ...,
           fill_value=...,
           allow_fill: bool = ...,
       ) -> np.ndarray:
           ...
       
       
    1: @overload
    1: def take_nd(
           arr: ExtensionArray,
           indexer,
           axis: int = ...,
           fill_value=...,
           allow_fill: bool = ...,
       ) -> ArrayLike:
           ...
       
       
    1: def take_nd(
           arr: ArrayLike,
           indexer,
    1:     axis: int = 0,
    1:     fill_value=lib.no_default,
    1:     allow_fill: bool = True,
       ) -> ArrayLike:
       
           """
           Specialized Cython take which sets NaN values in one pass
       
           This dispatches to ``take`` defined on ExtensionArrays. It does not
           currently dispatch to ``SparseArray.take`` for sparse ``arr``.
       
           Note: this function assumes that the indexer is a valid(ated) indexer with
           no out of bound indices.
       
           Parameters
           ----------
           arr : np.ndarray or ExtensionArray
               Input array.
           indexer : ndarray
               1-D array of indices to take, subarrays corresponding to -1 value
               indices are filed with fill_value
           axis : int, default 0
               Axis to take from
           fill_value : any, default np.nan
               Fill value to replace -1 values with
           allow_fill : bool, default True
               If False, indexer is assumed to contain no -1 values so no filling
               will be done.  This short-circuits computation of a mask.  Result is
               undefined if allow_fill == False and -1 is present in indexer.
       
           Returns
           -------
           subarray : np.ndarray or ExtensionArray
               May be the same type as the input, or cast to an ndarray.
           """
 1246:     if fill_value is lib.no_default:
               fill_value = na_value_for_dtype(arr.dtype, compat=False)
 1246:     elif isinstance(arr.dtype, np.dtype) and arr.dtype.kind in "mM":
               dtype, fill_value = maybe_promote(arr.dtype, fill_value)
               if arr.dtype != dtype:
                   # EA.take is strict about returning a new object of the same type
                   # so for that case cast upfront
                   arr = arr.astype(dtype)
       
 1246:     if not isinstance(arr, np.ndarray):
               # i.e. ExtensionArray,
               # includes for EA to catch DatetimeArray, TimedeltaArray
               if not is_1d_only_ea_obj(arr):
                   # i.e. DatetimeArray, TimedeltaArray
                   arr = cast("NDArrayBackedExtensionArray", arr)
                   return arr.take(
                       indexer, fill_value=fill_value, allow_fill=allow_fill, axis=axis
                   )
       
               return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)
       
 1246:     arr = np.asarray(arr)
 1246:     return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
       
       
    1: def _take_nd_ndarray(
           arr: np.ndarray,
           indexer: npt.NDArray[np.intp] | None,
           axis: int,
           fill_value,
           allow_fill: bool,
       ) -> np.ndarray:
       
 1246:     if indexer is None:
               indexer = np.arange(arr.shape[axis], dtype=np.intp)
               dtype, fill_value = arr.dtype, arr.dtype.type()
           else:
 1246:         indexer = ensure_platform_int(indexer)
       
 2492:     dtype, fill_value, mask_info = _take_preprocess_indexer_and_fill_value(
 1246:         arr, indexer, fill_value, allow_fill
           )
       
 1246:     flip_order = False
 1246:     if arr.ndim == 2 and arr.flags.f_contiguous:
 1246:         flip_order = True
       
 1246:     if flip_order:
 1246:         arr = arr.T
 1246:         axis = arr.ndim - axis - 1
       
           # at this point, it's guaranteed that dtype can hold both the arr values
           # and the fill_value
 1246:     out_shape_ = list(arr.shape)
 1246:     out_shape_[axis] = len(indexer)
 1246:     out_shape = tuple(out_shape_)
 1246:     if arr.flags.f_contiguous and axis == arr.ndim - 1:
               # minor tweak that can make an order-of-magnitude difference
               # for dataframes initialized directly from 2-d ndarrays
               # (s.t. df.values is c-contiguous and df._mgr.blocks[0] is its
               # f-contiguous transpose)
               out = np.empty(out_shape, dtype=dtype, order="F")
           else:
 1246:         out = np.empty(out_shape, dtype=dtype)
       
 2492:     func = _get_take_nd_function(
 1246:         arr.ndim, arr.dtype, out.dtype, axis=axis, mask_info=mask_info
           )
 1246:     func(arr, indexer, out, fill_value)
       
 1246:     if flip_order:
 1246:         out = out.T
 1246:     return out
       
       
    1: def take_1d(
           arr: ArrayLike,
           indexer: npt.NDArray[np.intp],
           fill_value=None,
           allow_fill: bool = True,
           mask: npt.NDArray[np.bool_] | None = None,
       ) -> ArrayLike:
           """
           Specialized version for 1D arrays. Differences compared to `take_nd`:
       
           - Assumes input array has already been converted to numpy array / EA
           - Assumes indexer is already guaranteed to be intp dtype ndarray
           - Only works for 1D arrays
       
           To ensure the lowest possible overhead.
       
           Note: similarly to `take_nd`, this function assumes that the indexer is
           a valid(ated) indexer with no out of bound indices.
       
           Parameters
           ----------
           arr : np.ndarray or ExtensionArray
               Input array.
           indexer : ndarray
               1-D array of indices to take (validated indices, intp dtype).
           fill_value : any, default np.nan
               Fill value to replace -1 values with
           allow_fill : bool, default True
               If False, indexer is assumed to contain no -1 values so no filling
               will be done.  This short-circuits computation of a mask. Result is
               undefined if allow_fill == False and -1 is present in indexer.
           mask : np.ndarray, optional, default None
               If `allow_fill` is True, and the mask (where indexer == -1) is already
               known, it can be passed to avoid recomputation.
           """
           if not isinstance(arr, np.ndarray):
               # ExtensionArray -> dispatch to their method
               return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)
       
           if not allow_fill:
               return arr.take(indexer)
       
           dtype, fill_value, mask_info = _take_preprocess_indexer_and_fill_value(
               arr, indexer, fill_value, True, mask
           )
       
           # at this point, it's guaranteed that dtype can hold both the arr values
           # and the fill_value
           out = np.empty(indexer.shape, dtype=dtype)
       
           func = _get_take_nd_function(
               arr.ndim, arr.dtype, out.dtype, axis=0, mask_info=mask_info
           )
           func(arr, indexer, out, fill_value)
       
           return out
       
       
    1: def take_2d_multi(
           arr: np.ndarray,
           indexer: tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]],
    1:     fill_value=np.nan,
       ) -> np.ndarray:
           """
           Specialized Cython take which sets NaN values in one pass.
           """
           # This is only called from one place in DataFrame._reindex_multi,
           #  so we know indexer is well-behaved.
           assert indexer is not None
           assert indexer[0] is not None
           assert indexer[1] is not None
       
           row_idx, col_idx = indexer
       
           row_idx = ensure_platform_int(row_idx)
           col_idx = ensure_platform_int(col_idx)
           indexer = row_idx, col_idx
           mask_info = None
       
           # check for promotion based on types only (do this first because
           # it's faster than computing a mask)
           dtype, fill_value = maybe_promote(arr.dtype, fill_value)
           if dtype != arr.dtype:
               # check if promotion is actually required based on indexer
               row_mask = row_idx == -1
               col_mask = col_idx == -1
               row_needs = row_mask.any()
               col_needs = col_mask.any()
               mask_info = (row_mask, col_mask), (row_needs, col_needs)
       
               if not (row_needs or col_needs):
                   # if not, then depromote, set fill_value to dummy
                   # (it won't be used but we don't want the cython code
                   # to crash when trying to cast it to dtype)
                   dtype, fill_value = arr.dtype, arr.dtype.type()
       
           # at this point, it's guaranteed that dtype can hold both the arr values
           # and the fill_value
           out_shape = len(row_idx), len(col_idx)
           out = np.empty(out_shape, dtype=dtype)
       
           func = _take_2d_multi_dict.get((arr.dtype.name, out.dtype.name), None)
           if func is None and arr.dtype != out.dtype:
               func = _take_2d_multi_dict.get((out.dtype.name, out.dtype.name), None)
               if func is not None:
                   func = _convert_wrapper(func, out.dtype)
       
           if func is not None:
               func(arr, indexer, out=out, fill_value=fill_value)
           else:
               # test_reindex_multi
               _take_2d_multi_object(
                   arr, indexer, out, fill_value=fill_value, mask_info=mask_info
               )
       
           return out
       
       
    1: @functools.lru_cache(maxsize=128)
    1: def _get_take_nd_function_cached(
           ndim: int, arr_dtype: np.dtype, out_dtype: np.dtype, axis: int
       ):
           """
           Part of _get_take_nd_function below that doesn't need `mask_info` and thus
           can be cached (mask_info potentially contains a numpy ndarray which is not
           hashable and thus cannot be used as argument for cached function).
           """
    4:     tup = (arr_dtype.name, out_dtype.name)
    4:     if ndim == 1:
               func = _take_1d_dict.get(tup, None)
    4:     elif ndim == 2:
    4:         if axis == 0:
    4:             func = _take_2d_axis0_dict.get(tup, None)
               else:
                   func = _take_2d_axis1_dict.get(tup, None)
    4:     if func is not None:
    4:         return func
       
           # We get here with string, uint, float16, and complex dtypes that could
           #  potentially be handled in algos_take_helper.
           #  Also a couple with (M8[ns], object) and (m8[ns], object)
           tup = (out_dtype.name, out_dtype.name)
           if ndim == 1:
               func = _take_1d_dict.get(tup, None)
           elif ndim == 2:
               if axis == 0:
                   func = _take_2d_axis0_dict.get(tup, None)
               else:
                   func = _take_2d_axis1_dict.get(tup, None)
           if func is not None:
               func = _convert_wrapper(func, out_dtype)
               return func
       
           return None
       
       
    1: def _get_take_nd_function(
           ndim: int, arr_dtype: np.dtype, out_dtype: np.dtype, axis: int = 0, mask_info=None
       ):
           """
           Get the appropriate "take" implementation for the given dimension, axis
           and dtypes.
           """
 1246:     func = None
 1246:     if ndim <= 2:
               # for this part we don't need `mask_info` -> use the cached algo lookup
 1246:         func = _get_take_nd_function_cached(ndim, arr_dtype, out_dtype, axis)
       
 1246:     if func is None:
       
               def func(arr, indexer, out, fill_value=np.nan):
                   indexer = ensure_platform_int(indexer)
                   _take_nd_object(
                       arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info
                   )
       
 1246:     return func
       
       
    1: def _view_wrapper(f, arr_dtype=None, out_dtype=None, fill_wrap=None):
   16:     def wrapper(
   16:         arr: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=np.nan
           ):
  180:         if arr_dtype is not None:
  180:             arr = arr.view(arr_dtype)
  180:         if out_dtype is not None:
  180:             out = out.view(out_dtype)
  180:         if fill_wrap is not None:
                   fill_value = fill_wrap(fill_value)
  180:         f(arr, indexer, out, fill_value=fill_value)
       
   16:     return wrapper
       
       
    1: def _convert_wrapper(f, conv_dtype):
           def wrapper(
               arr: np.ndarray, indexer: np.ndarray, out: np.ndarray, fill_value=np.nan
           ):
               if conv_dtype == object:
                   # GH#39755 avoid casting dt64/td64 to integers
                   arr = ensure_wrapped_if_datetimelike(arr)
               arr = arr.astype(conv_dtype)
               f(arr, indexer, out, fill_value=fill_value)
       
           return wrapper
       
       
    1: _take_1d_dict = {
    1:     ("int8", "int8"): libalgos.take_1d_int8_int8,
    1:     ("int8", "int32"): libalgos.take_1d_int8_int32,
    1:     ("int8", "int64"): libalgos.take_1d_int8_int64,
    1:     ("int8", "float64"): libalgos.take_1d_int8_float64,
    1:     ("int16", "int16"): libalgos.take_1d_int16_int16,
    1:     ("int16", "int32"): libalgos.take_1d_int16_int32,
    1:     ("int16", "int64"): libalgos.take_1d_int16_int64,
    1:     ("int16", "float64"): libalgos.take_1d_int16_float64,
    1:     ("int32", "int32"): libalgos.take_1d_int32_int32,
    1:     ("int32", "int64"): libalgos.take_1d_int32_int64,
    1:     ("int32", "float64"): libalgos.take_1d_int32_float64,
    1:     ("int64", "int64"): libalgos.take_1d_int64_int64,
    1:     ("int64", "float64"): libalgos.take_1d_int64_float64,
    1:     ("float32", "float32"): libalgos.take_1d_float32_float32,
    1:     ("float32", "float64"): libalgos.take_1d_float32_float64,
    1:     ("float64", "float64"): libalgos.take_1d_float64_float64,
    1:     ("object", "object"): libalgos.take_1d_object_object,
    1:     ("bool", "bool"): _view_wrapper(libalgos.take_1d_bool_bool, np.uint8, np.uint8),
    1:     ("bool", "object"): _view_wrapper(libalgos.take_1d_bool_object, np.uint8, None),
    2:     ("datetime64[ns]", "datetime64[ns]"): _view_wrapper(
    1:         libalgos.take_1d_int64_int64, np.int64, np.int64, np.int64
           ),
    2:     ("timedelta64[ns]", "timedelta64[ns]"): _view_wrapper(
    1:         libalgos.take_1d_int64_int64, np.int64, np.int64, np.int64
           ),
       }
       
    1: _take_2d_axis0_dict = {
    1:     ("int8", "int8"): libalgos.take_2d_axis0_int8_int8,
    1:     ("int8", "int32"): libalgos.take_2d_axis0_int8_int32,
    1:     ("int8", "int64"): libalgos.take_2d_axis0_int8_int64,
    1:     ("int8", "float64"): libalgos.take_2d_axis0_int8_float64,
    1:     ("int16", "int16"): libalgos.take_2d_axis0_int16_int16,
    1:     ("int16", "int32"): libalgos.take_2d_axis0_int16_int32,
    1:     ("int16", "int64"): libalgos.take_2d_axis0_int16_int64,
    1:     ("int16", "float64"): libalgos.take_2d_axis0_int16_float64,
    1:     ("int32", "int32"): libalgos.take_2d_axis0_int32_int32,
    1:     ("int32", "int64"): libalgos.take_2d_axis0_int32_int64,
    1:     ("int32", "float64"): libalgos.take_2d_axis0_int32_float64,
    1:     ("int64", "int64"): libalgos.take_2d_axis0_int64_int64,
    1:     ("int64", "float64"): libalgos.take_2d_axis0_int64_float64,
    1:     ("float32", "float32"): libalgos.take_2d_axis0_float32_float32,
    1:     ("float32", "float64"): libalgos.take_2d_axis0_float32_float64,
    1:     ("float64", "float64"): libalgos.take_2d_axis0_float64_float64,
    1:     ("object", "object"): libalgos.take_2d_axis0_object_object,
    2:     ("bool", "bool"): _view_wrapper(
    1:         libalgos.take_2d_axis0_bool_bool, np.uint8, np.uint8
           ),
    2:     ("bool", "object"): _view_wrapper(
    1:         libalgos.take_2d_axis0_bool_object, np.uint8, None
           ),
    2:     ("datetime64[ns]", "datetime64[ns]"): _view_wrapper(
    1:         libalgos.take_2d_axis0_int64_int64, np.int64, np.int64, fill_wrap=np.int64
           ),
    2:     ("timedelta64[ns]", "timedelta64[ns]"): _view_wrapper(
    1:         libalgos.take_2d_axis0_int64_int64, np.int64, np.int64, fill_wrap=np.int64
           ),
       }
       
    1: _take_2d_axis1_dict = {
    1:     ("int8", "int8"): libalgos.take_2d_axis1_int8_int8,
    1:     ("int8", "int32"): libalgos.take_2d_axis1_int8_int32,
    1:     ("int8", "int64"): libalgos.take_2d_axis1_int8_int64,
    1:     ("int8", "float64"): libalgos.take_2d_axis1_int8_float64,
    1:     ("int16", "int16"): libalgos.take_2d_axis1_int16_int16,
    1:     ("int16", "int32"): libalgos.take_2d_axis1_int16_int32,
    1:     ("int16", "int64"): libalgos.take_2d_axis1_int16_int64,
    1:     ("int16", "float64"): libalgos.take_2d_axis1_int16_float64,
    1:     ("int32", "int32"): libalgos.take_2d_axis1_int32_int32,
    1:     ("int32", "int64"): libalgos.take_2d_axis1_int32_int64,
    1:     ("int32", "float64"): libalgos.take_2d_axis1_int32_float64,
    1:     ("int64", "int64"): libalgos.take_2d_axis1_int64_int64,
    1:     ("int64", "float64"): libalgos.take_2d_axis1_int64_float64,
    1:     ("float32", "float32"): libalgos.take_2d_axis1_float32_float32,
    1:     ("float32", "float64"): libalgos.take_2d_axis1_float32_float64,
    1:     ("float64", "float64"): libalgos.take_2d_axis1_float64_float64,
    1:     ("object", "object"): libalgos.take_2d_axis1_object_object,
    2:     ("bool", "bool"): _view_wrapper(
    1:         libalgos.take_2d_axis1_bool_bool, np.uint8, np.uint8
           ),
    2:     ("bool", "object"): _view_wrapper(
    1:         libalgos.take_2d_axis1_bool_object, np.uint8, None
           ),
    2:     ("datetime64[ns]", "datetime64[ns]"): _view_wrapper(
    1:         libalgos.take_2d_axis1_int64_int64, np.int64, np.int64, fill_wrap=np.int64
           ),
    2:     ("timedelta64[ns]", "timedelta64[ns]"): _view_wrapper(
    1:         libalgos.take_2d_axis1_int64_int64, np.int64, np.int64, fill_wrap=np.int64
           ),
       }
       
    1: _take_2d_multi_dict = {
    1:     ("int8", "int8"): libalgos.take_2d_multi_int8_int8,
    1:     ("int8", "int32"): libalgos.take_2d_multi_int8_int32,
    1:     ("int8", "int64"): libalgos.take_2d_multi_int8_int64,
    1:     ("int8", "float64"): libalgos.take_2d_multi_int8_float64,
    1:     ("int16", "int16"): libalgos.take_2d_multi_int16_int16,
    1:     ("int16", "int32"): libalgos.take_2d_multi_int16_int32,
    1:     ("int16", "int64"): libalgos.take_2d_multi_int16_int64,
    1:     ("int16", "float64"): libalgos.take_2d_multi_int16_float64,
    1:     ("int32", "int32"): libalgos.take_2d_multi_int32_int32,
    1:     ("int32", "int64"): libalgos.take_2d_multi_int32_int64,
    1:     ("int32", "float64"): libalgos.take_2d_multi_int32_float64,
    1:     ("int64", "int64"): libalgos.take_2d_multi_int64_int64,
    1:     ("int64", "float64"): libalgos.take_2d_multi_int64_float64,
    1:     ("float32", "float32"): libalgos.take_2d_multi_float32_float32,
    1:     ("float32", "float64"): libalgos.take_2d_multi_float32_float64,
    1:     ("float64", "float64"): libalgos.take_2d_multi_float64_float64,
    1:     ("object", "object"): libalgos.take_2d_multi_object_object,
    2:     ("bool", "bool"): _view_wrapper(
    1:         libalgos.take_2d_multi_bool_bool, np.uint8, np.uint8
           ),
    2:     ("bool", "object"): _view_wrapper(
    1:         libalgos.take_2d_multi_bool_object, np.uint8, None
           ),
    2:     ("datetime64[ns]", "datetime64[ns]"): _view_wrapper(
    1:         libalgos.take_2d_multi_int64_int64, np.int64, np.int64, fill_wrap=np.int64
           ),
    2:     ("timedelta64[ns]", "timedelta64[ns]"): _view_wrapper(
    1:         libalgos.take_2d_multi_int64_int64, np.int64, np.int64, fill_wrap=np.int64
           ),
       }
       
       
    1: def _take_nd_object(
           arr: np.ndarray,
           indexer: npt.NDArray[np.intp],
           out: np.ndarray,
           axis: int,
           fill_value,
           mask_info,
       ):
           if mask_info is not None:
               mask, needs_masking = mask_info
           else:
               mask = indexer == -1
               needs_masking = mask.any()
           if arr.dtype != out.dtype:
               arr = arr.astype(out.dtype)
           if arr.shape[axis] > 0:
               arr.take(indexer, axis=axis, out=out)
           if needs_masking:
               outindexer = [slice(None)] * arr.ndim
               outindexer[axis] = mask
               out[tuple(outindexer)] = fill_value
       
       
    1: def _take_2d_multi_object(
           arr: np.ndarray,
           indexer: tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]],
           out: np.ndarray,
           fill_value,
           mask_info,
       ) -> None:
           # this is not ideal, performance-wise, but it's better than raising
           # an exception (best to optimize in Cython to avoid getting here)
           row_idx, col_idx = indexer  # both np.intp
           if mask_info is not None:
               (row_mask, col_mask), (row_needs, col_needs) = mask_info
           else:
               row_mask = row_idx == -1
               col_mask = col_idx == -1
               row_needs = row_mask.any()
               col_needs = col_mask.any()
           if fill_value is not None:
               if row_needs:
                   out[row_mask, :] = fill_value
               if col_needs:
                   out[:, col_mask] = fill_value
           for i in range(len(row_idx)):
               u_ = row_idx[i]
               for j in range(len(col_idx)):
                   v = col_idx[j]
                   out[i, j] = arr[u_, v]
       
       
    1: def _take_preprocess_indexer_and_fill_value(
           arr: np.ndarray,
           indexer: npt.NDArray[np.intp],
           fill_value,
           allow_fill: bool,
           mask: npt.NDArray[np.bool_] | None = None,
       ):
 1246:     mask_info: tuple[np.ndarray | None, bool] | None = None
       
 1246:     if not allow_fill:
               dtype, fill_value = arr.dtype, arr.dtype.type()
               mask_info = None, False
           else:
               # check for promotion based on types only (do this first because
               # it's faster than computing a mask)
 1246:         dtype, fill_value = maybe_promote(arr.dtype, fill_value)
 1246:         if dtype != arr.dtype:
                   # check if promotion is actually required based on indexer
  713:             if mask is not None:
                       needs_masking = True
                   else:
  713:                 mask = indexer == -1
  713:                 needs_masking = bool(mask.any())
  713:             mask_info = mask, needs_masking
  713:             if not needs_masking:
                       # if not, then depromote, set fill_value to dummy
                       # (it won't be used but we don't want the cython code
                       # to crash when trying to cast it to dtype)
  713:                 dtype, fill_value = arr.dtype, arr.dtype.type()
       
 1246:     return dtype, fill_value, mask_info
