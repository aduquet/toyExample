    1: """
       Module for formatting output data into CSV files.
       """
       
    1: from __future__ import annotations
       
    1: import csv as csvlib
    1: import os
    1: from typing import (
           TYPE_CHECKING,
           Any,
           Hashable,
           Iterator,
           Sequence,
           cast,
       )
       
    1: import numpy as np
       
    1: from pandas._libs import writers as libwriters
    1: from pandas._typing import (
           CompressionOptions,
           FilePath,
           FloatFormatType,
           IndexLabel,
           StorageOptions,
           WriteBuffer,
       )
    1: from pandas.util._decorators import cache_readonly
       
    1: from pandas.core.dtypes.generic import (
           ABCDatetimeIndex,
           ABCIndex,
           ABCMultiIndex,
           ABCPeriodIndex,
       )
    1: from pandas.core.dtypes.missing import notna
       
    1: from pandas.core.indexes.api import Index
       
    1: from pandas.io.common import get_handle
       
    1: if TYPE_CHECKING:
           from pandas.io.formats.format import DataFrameFormatter
       
       
    2: class CSVFormatter:
    1:     cols: np.ndarray
       
    1:     def __init__(
               self,
               formatter: DataFrameFormatter,
               path_or_buf: FilePath | WriteBuffer[str] | WriteBuffer[bytes] = "",
               sep: str = ",",
               cols: Sequence[Hashable] | None = None,
               index_label: IndexLabel | None = None,
               mode: str = "w",
               encoding: str | None = None,
               errors: str = "strict",
               compression: CompressionOptions = "infer",
               quoting: int | None = None,
               line_terminator: str | None = "\n",
               chunksize: int | None = None,
               quotechar: str | None = '"',
               date_format: str | None = None,
               doublequote: bool = True,
               escapechar: str | None = None,
               storage_options: StorageOptions = None,
           ):
  180:         self.fmt = formatter
       
  180:         self.obj = self.fmt.frame
       
  180:         self.filepath_or_buffer = path_or_buf
  180:         self.encoding = encoding
  180:         self.compression = compression
  180:         self.mode = mode
  180:         self.storage_options = storage_options
       
  180:         self.sep = sep
  180:         self.index_label = self._initialize_index_label(index_label)
  180:         self.errors = errors
  180:         self.quoting = quoting or csvlib.QUOTE_MINIMAL
  180:         self.quotechar = self._initialize_quotechar(quotechar)
  180:         self.doublequote = doublequote
  180:         self.escapechar = escapechar
  180:         self.line_terminator = line_terminator or os.linesep
  180:         self.date_format = date_format
  180:         self.cols = self._initialize_columns(cols)
  180:         self.chunksize = self._initialize_chunksize(chunksize)
       
    1:     @property
    1:     def na_rep(self) -> str:
  540:         return self.fmt.na_rep
       
    1:     @property
    1:     def float_format(self) -> FloatFormatType | None:
  540:         return self.fmt.float_format
       
    1:     @property
    1:     def decimal(self) -> str:
  540:         return self.fmt.decimal
       
    1:     @property
    1:     def header(self) -> bool | Sequence[str]:
  360:         return self.fmt.header
       
    1:     @property
    1:     def index(self) -> bool:
  180:         return self.fmt.index
       
    1:     def _initialize_index_label(self, index_label: IndexLabel | None) -> IndexLabel:
  180:         if index_label is not False:
  180:             if index_label is None:
  180:                 return self._get_index_label_from_obj()
                   elif not isinstance(index_label, (list, tuple, np.ndarray, ABCIndex)):
                       # given a string for a DF with Index
                       return [index_label]
               return index_label
       
    1:     def _get_index_label_from_obj(self) -> list[str]:
  180:         if isinstance(self.obj.index, ABCMultiIndex):
                   return self._get_index_label_multiindex()
               else:
  180:             return self._get_index_label_flat()
       
    1:     def _get_index_label_multiindex(self) -> list[str]:
               return [name or "" for name in self.obj.index.names]
       
    1:     def _get_index_label_flat(self) -> list[str]:
  180:         index_label = self.obj.index.name
  180:         return [""] if index_label is None else [index_label]
       
    1:     def _initialize_quotechar(self, quotechar: str | None) -> str | None:
  180:         if self.quoting != csvlib.QUOTE_NONE:
                   # prevents crash in _csv
  180:             return quotechar
               return None
       
    1:     @property
    1:     def has_mi_columns(self) -> bool:
  180:         return bool(isinstance(self.obj.columns, ABCMultiIndex))
       
    1:     def _initialize_columns(self, cols: Sequence[Hashable] | None) -> np.ndarray:
               # validate mi options
  180:         if self.has_mi_columns:
                   if cols is not None:
                       msg = "cannot specify cols with a MultiIndex on the columns"
                       raise TypeError(msg)
       
  180:         if cols is not None:
                   if isinstance(cols, ABCIndex):
                       cols = cols._format_native_types(**self._number_format)
                   else:
                       cols = list(cols)
                   self.obj = self.obj.loc[:, cols]
       
               # update columns to include possible multiplicity of dupes
               # and make sure cols is just a list of labels
  180:         new_cols = self.obj.columns
  180:         return new_cols._format_native_types(**self._number_format)
       
    1:     def _initialize_chunksize(self, chunksize: int | None) -> int:
  180:         if chunksize is None:
  180:             return (100000 // (len(self.cols) or 1)) or 1
               return int(chunksize)
       
    1:     @property
    1:     def _number_format(self) -> dict[str, Any]:
               """Dictionary used for storing number formatting settings."""
  540:         return {
  540:             "na_rep": self.na_rep,
  540:             "float_format": self.float_format,
  540:             "date_format": self.date_format,
  540:             "quoting": self.quoting,
  540:             "decimal": self.decimal,
               }
       
    1:     @cache_readonly
    1:     def data_index(self) -> Index:
  180:         data_index = self.obj.index
  180:         if (
  180:             isinstance(data_index, (ABCDatetimeIndex, ABCPeriodIndex))
                   and self.date_format is not None
               ):
                   data_index = Index(
                       [x.strftime(self.date_format) if notna(x) else "" for x in data_index]
                   )
  180:         elif isinstance(data_index, ABCMultiIndex):
                   data_index = data_index.remove_unused_levels()
  180:         return data_index
       
    1:     @property
    1:     def nlevels(self) -> int:
  180:         if self.index:
                   return getattr(self.data_index, "nlevels", 1)
               else:
  180:             return 0
       
    1:     @property
    1:     def _has_aliases(self) -> bool:
  180:         return isinstance(self.header, (tuple, list, np.ndarray, ABCIndex))
       
    1:     @property
    1:     def _need_to_save_header(self) -> bool:
  180:         return bool(self._has_aliases or self.header)
       
    1:     @property
    1:     def write_cols(self) -> Sequence[Hashable]:
               if self._has_aliases:
                   assert not isinstance(self.header, bool)
                   if len(self.header) != len(self.cols):
                       raise ValueError(
                           f"Writing {len(self.cols)} cols but got {len(self.header)} aliases"
                       )
                   else:
                       return self.header
               else:
                   # self.cols is an ndarray derived from Index._format_native_types,
                   #  so its entries are strings, i.e. hashable
                   return cast(Sequence[Hashable], self.cols)
       
    1:     @property
    1:     def encoded_labels(self) -> list[Hashable]:
               encoded_labels: list[Hashable] = []
       
               if self.index and self.index_label:
                   assert isinstance(self.index_label, Sequence)
                   encoded_labels = list(self.index_label)
       
               if not self.has_mi_columns or self._has_aliases:
                   encoded_labels += list(self.write_cols)
       
               return encoded_labels
       
    1:     def save(self) -> None:
               """
               Create the writer & save.
               """
               # apply compression and byte/text conversion
  360:         with get_handle(
  180:             self.filepath_or_buffer,
  180:             self.mode,
  180:             encoding=self.encoding,
  180:             errors=self.errors,
  180:             compression=self.compression,
  180:             storage_options=self.storage_options,
  180:         ) as handles:
       
                   # Note: self.encoding is irrelevant here
  360:             self.writer = csvlib.writer(
  180:                 handles.handle,
  180:                 lineterminator=self.line_terminator,
  180:                 delimiter=self.sep,
  180:                 quoting=self.quoting,
  180:                 doublequote=self.doublequote,
  180:                 escapechar=self.escapechar,
  180:                 quotechar=self.quotechar,
                   )
       
  180:             self._save()
       
    1:     def _save(self) -> None:
  180:         if self._need_to_save_header:
                   self._save_header()
  180:         self._save_body()
       
    1:     def _save_header(self) -> None:
               if not self.has_mi_columns or self._has_aliases:
                   self.writer.writerow(self.encoded_labels)
               else:
                   for row in self._generate_multiindex_header_rows():
                       self.writer.writerow(row)
       
    1:     def _generate_multiindex_header_rows(self) -> Iterator[list[Hashable]]:
               columns = self.obj.columns
               for i in range(columns.nlevels):
                   # we need at least 1 index column to write our col names
                   col_line = []
                   if self.index:
                       # name is the first column
                       col_line.append(columns.names[i])
       
                       if isinstance(self.index_label, list) and len(self.index_label) > 1:
                           col_line.extend([""] * (len(self.index_label) - 1))
       
                   col_line.extend(columns._get_level_values(i))
                   yield col_line
       
               # Write out the index line if it's not empty.
               # Otherwise, we will print out an extraneous
               # blank line between the mi and the data rows.
               if self.encoded_labels and set(self.encoded_labels) != {""}:
                   yield self.encoded_labels + [""] * len(columns)
       
    1:     def _save_body(self) -> None:
  180:         nrows = len(self.data_index)
  180:         chunks = (nrows // self.chunksize) + 1
  360:         for i in range(chunks):
  180:             start_i = i * self.chunksize
  180:             end_i = min(start_i + self.chunksize, nrows)
  180:             if start_i >= end_i:
                       break
  180:             self._save_chunk(start_i, end_i)
       
    1:     def _save_chunk(self, start_i: int, end_i: int) -> None:
               # create the data for a chunk
  180:         slicer = slice(start_i, end_i)
  180:         df = self.obj.iloc[slicer]
       
  180:         res = df._mgr.to_native_types(**self._number_format)
 1980:         data = [res.iget_values(i) for i in range(len(res.items))]
       
  180:         ix = self.data_index[slicer]._format_native_types(**self._number_format)
  360:         libwriters.write_csv_rows(
  180:             data,
  180:             ix,
  180:             self.nlevels,
  180:             self.cols,
  180:             self.writer,
               )
