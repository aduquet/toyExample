    1: """
       compat
       ======
       
       Cross-compatible functions for different versions of Python.
       
       Other items:
       * platform checker
       """
    1: import os
    1: import platform
    1: import sys
       
    1: from pandas._typing import F
    1: from pandas.compat.numpy import (
           is_numpy_dev,
           np_version_under1p19,
           np_version_under1p20,
       )
    1: from pandas.compat.pyarrow import (
           pa_version_under1p01,
           pa_version_under2p0,
           pa_version_under3p0,
           pa_version_under4p0,
       )
       
    1: PY39 = sys.version_info >= (3, 9)
    1: PY310 = sys.version_info >= (3, 10)
    1: PYPY = platform.python_implementation() == "PyPy"
    1: IS64 = sys.maxsize > 2 ** 32
       
       
    1: def set_function_name(f: F, name: str, cls) -> F:
           """
           Bind the name/qualname attributes of the function.
           """
           f.__name__ = name
           f.__qualname__ = f"{cls.__name__}.{name}"
           f.__module__ = cls.__module__
           return f
       
       
    1: def is_platform_little_endian() -> bool:
           """
           Checking if the running platform is little endian.
       
           Returns
           -------
           bool
               True if the running platform is little endian.
           """
           return sys.byteorder == "little"
       
       
    1: def is_platform_windows() -> bool:
           """
           Checking if the running platform is windows.
       
           Returns
           -------
           bool
               True if the running platform is windows.
           """
           return sys.platform in ["win32", "cygwin"]
       
       
    1: def is_platform_linux() -> bool:
           """
           Checking if the running platform is linux.
       
           Returns
           -------
           bool
               True if the running platform is linux.
           """
           return sys.platform == "linux"
       
       
    1: def is_platform_mac() -> bool:
           """
           Checking if the running platform is mac.
       
           Returns
           -------
           bool
               True if the running platform is mac.
           """
           return sys.platform == "darwin"
       
       
    1: def is_platform_arm() -> bool:
           """
           Checking if the running platform use ARM architecture.
       
           Returns
           -------
           bool
               True if the running platform uses ARM architecture.
           """
           return platform.machine() in ("arm64", "aarch64") or platform.machine().startswith(
               "armv"
           )
       
       
    1: def is_ci_environment() -> bool:
           """
           Checking if running in a continuous integration environment by checking
           the PANDAS_CI environment variable.
       
           Returns
           -------
           bool
               True if the running in a continuous integration environment.
           """
           return os.environ.get("PANDAS_CI", "0") == "1"
       
       
    1: def get_lzma_file():
           """
           Importing the `LZMAFile` class from the `lzma` module.
       
           Returns
           -------
           class
               The `LZMAFile` class from the `lzma` module.
       
           Raises
           ------
           RuntimeError
               If the `lzma` module was not imported correctly, or didn't exist.
           """
           try:
               import lzma
           except ImportError:
               raise RuntimeError(
                   "lzma module not available. "
                   "A Python re-install with the proper dependencies, "
                   "might be required to solve this issue."
               )
           return lzma.LZMAFile
       
       
    1: __all__ = [
    1:     "is_numpy_dev",
    1:     "np_version_under1p19",
    1:     "np_version_under1p20",
    1:     "pa_version_under1p01",
    1:     "pa_version_under2p0",
    1:     "pa_version_under3p0",
    1:     "pa_version_under4p0",
       ]
