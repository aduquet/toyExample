    1: """
       This module is imported from the pandas package __init__.py file
       in order to ensure that the core.config options registered here will
       be available as soon as the user loads the package. if register_option
       is invoked inside specific modules, they will not be registered until that
       module is imported, which may or may not be a problem.
       
       If you need to make sure options are available even before a certain
       module is imported, register them here rather than in the module.
       
       """
    1: import os
    1: from typing import Callable
    1: import warnings
       
    1: import pandas._config.config as cf
    1: from pandas._config.config import (
           is_bool,
           is_callable,
           is_instance_factory,
           is_int,
           is_nonnegative_int,
           is_one_of_factory,
           is_str,
           is_text,
       )
       
    1: from pandas.util._exceptions import find_stack_level
       
       # compute
       
    1: use_bottleneck_doc = """
       : bool
           Use the bottleneck library to accelerate if it is installed,
           the default is True
           Valid values: False,True
       """
       
       
    1: def use_bottleneck_cb(key):
           from pandas.core import nanops
       
           nanops.set_use_bottleneck(cf.get_option(key))
       
       
    1: use_numexpr_doc = """
       : bool
           Use the numexpr library to accelerate computation if it is installed,
           the default is True
           Valid values: False,True
       """
       
       
    1: def use_numexpr_cb(key):
           from pandas.core.computation import expressions
       
           expressions.set_use_numexpr(cf.get_option(key))
       
       
    1: use_numba_doc = """
       : bool
           Use the numba engine option for select operations if it is installed,
           the default is False
           Valid values: False,True
       """
       
       
    1: def use_numba_cb(key):
           from pandas.core.util import numba_
       
           numba_.set_use_numba(cf.get_option(key))
       
       
    1: with cf.config_prefix("compute"):
    2:     cf.register_option(
    1:         "use_bottleneck",
    1:         True,
    1:         use_bottleneck_doc,
    1:         validator=is_bool,
    1:         cb=use_bottleneck_cb,
           )
    2:     cf.register_option(
    1:         "use_numexpr", True, use_numexpr_doc, validator=is_bool, cb=use_numexpr_cb
           )
    2:     cf.register_option(
    1:         "use_numba", False, use_numba_doc, validator=is_bool, cb=use_numba_cb
           )
       #
       # options from the "display" namespace
       
    1: pc_precision_doc = """
       : int
           Floating point output precision in terms of number of places after the
           decimal, for regular formatting as well as scientific notation. Similar
           to ``precision`` in :meth:`numpy.set_printoptions`.
       """
       
    1: pc_colspace_doc = """
       : int
           Default space for DataFrame columns.
       """
       
    1: pc_max_rows_doc = """
       : int
           If max_rows is exceeded, switch to truncate view. Depending on
           `large_repr`, objects are either centrally truncated or printed as
           a summary view. 'None' value means unlimited.
       
           In case python/IPython is running in a terminal and `large_repr`
           equals 'truncate' this can be set to 0 and pandas will auto-detect
           the height of the terminal and print a truncated object which fits
           the screen height. The IPython notebook, IPython qtconsole, or
           IDLE do not run in a terminal and hence it is not possible to do
           correct auto-detection.
       """
       
    1: pc_min_rows_doc = """
       : int
           The numbers of rows to show in a truncated view (when `max_rows` is
           exceeded). Ignored when `max_rows` is set to None or 0. When set to
           None, follows the value of `max_rows`.
       """
       
    1: pc_max_cols_doc = """
       : int
           If max_cols is exceeded, switch to truncate view. Depending on
           `large_repr`, objects are either centrally truncated or printed as
           a summary view. 'None' value means unlimited.
       
           In case python/IPython is running in a terminal and `large_repr`
           equals 'truncate' this can be set to 0 and pandas will auto-detect
           the width of the terminal and print a truncated object which fits
           the screen width. The IPython notebook, IPython qtconsole, or IDLE
           do not run in a terminal and hence it is not possible to do
           correct auto-detection.
       """
       
    1: pc_max_categories_doc = """
       : int
           This sets the maximum number of categories pandas should output when
           printing out a `Categorical` or a Series of dtype "category".
       """
       
    1: pc_max_info_cols_doc = """
       : int
           max_info_columns is used in DataFrame.info method to decide if
           per column information will be printed.
       """
       
    1: pc_nb_repr_h_doc = """
       : boolean
           When True, IPython notebook will use html representation for
           pandas objects (if it is available).
       """
       
    1: pc_pprint_nest_depth = """
       : int
           Controls the number of nested levels to process when pretty-printing
       """
       
    1: pc_multi_sparse_doc = """
       : boolean
           "sparsify" MultiIndex display (don't display repeated
           elements in outer levels within groups)
       """
       
    1: float_format_doc = """
       : callable
           The callable should accept a floating point number and return
           a string with the desired format of the number. This is used
           in some places like SeriesFormatter.
           See formats.format.EngFormatter for an example.
       """
       
    1: max_colwidth_doc = """
       : int or None
           The maximum width in characters of a column in the repr of
           a pandas data structure. When the column overflows, a "..."
           placeholder is embedded in the output. A 'None' value means unlimited.
       """
       
    1: colheader_justify_doc = """
       : 'left'/'right'
           Controls the justification of column headers. used by DataFrameFormatter.
       """
       
    1: pc_expand_repr_doc = """
       : boolean
           Whether to print out the full DataFrame repr for wide DataFrames across
           multiple lines, `max_columns` is still respected, but the output will
           wrap-around across multiple "pages" if its width exceeds `display.width`.
       """
       
    1: pc_show_dimensions_doc = """
       : boolean or 'truncate'
           Whether to print out dimensions at the end of DataFrame repr.
           If 'truncate' is specified, only print out the dimensions if the
           frame is truncated (e.g. not display all rows and/or columns)
       """
       
    1: pc_east_asian_width_doc = """
       : boolean
           Whether to use the Unicode East Asian Width to calculate the display text
           width.
           Enabling this may affect to the performance (default: False)
       """
       
    1: pc_ambiguous_as_wide_doc = """
       : boolean
           Whether to handle Unicode characters belong to Ambiguous as Wide (width=2)
           (default: False)
       """
       
    1: pc_latex_repr_doc = """
       : boolean
           Whether to produce a latex DataFrame representation for jupyter
           environments that support it.
           (default: False)
       """
       
    1: pc_table_schema_doc = """
       : boolean
           Whether to publish a Table Schema representation for frontends
           that support it.
           (default: False)
       """
       
    1: pc_html_border_doc = """
       : int
           A ``border=value`` attribute is inserted in the ``<table>`` tag
           for the DataFrame HTML repr.
       """
       
    1: pc_html_use_mathjax_doc = """\
       : boolean
           When True, Jupyter notebook will process table contents using MathJax,
           rendering mathematical expressions enclosed by the dollar symbol.
           (default: True)
       """
       
    1: pc_max_dir_items = """\
       : int
           The number of items that will be added to `dir(...)`. 'None' value means
           unlimited. Because dir is cached, changing this option will not immediately
           affect already existing dataframes until a column is deleted or added.
       
           This is for instance used to suggest columns from a dataframe to tab
           completion.
       """
       
    1: pc_width_doc = """
       : int
           Width of the display in characters. In case python/IPython is running in
           a terminal this can be set to None and pandas will correctly auto-detect
           the width.
           Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a
           terminal and hence it is not possible to correctly detect the width.
       """
       
    1: pc_chop_threshold_doc = """
       : float or None
           if set to a float value, all float values smaller then the given threshold
           will be displayed as exactly 0 by repr and friends.
       """
       
    1: pc_max_seq_items = """
       : int or None
           When pretty-printing a long sequence, no more then `max_seq_items`
           will be printed. If items are omitted, they will be denoted by the
           addition of "..." to the resulting string.
       
           If set to None, the number of items to be printed is unlimited.
       """
       
    1: pc_max_info_rows_doc = """
       : int or None
           df.info() will usually show null-counts for each column.
           For large frames this can be quite slow. max_info_rows and max_info_cols
           limit this null check only to frames with smaller dimensions than
           specified.
       """
       
    1: pc_large_repr_doc = """
       : 'truncate'/'info'
           For DataFrames exceeding max_rows/max_cols, the repr (and HTML repr) can
           show a truncated table (the default from 0.13), or switch to the view from
           df.info() (the behaviour in earlier versions of pandas).
       """
       
    1: pc_memory_usage_doc = """
       : bool, string or None
           This specifies if the memory usage of a DataFrame should be displayed when
           df.info() is called. Valid values True,False,'deep'
       """
       
    1: pc_latex_escape = """
       : bool
           This specifies if the to_latex method of a Dataframe uses escapes special
           characters.
           Valid values: False,True
       """
       
    1: pc_latex_longtable = """
       :bool
           This specifies if the to_latex method of a Dataframe uses the longtable
           format.
           Valid values: False,True
       """
       
    1: pc_latex_multicolumn = """
       : bool
           This specifies if the to_latex method of a Dataframe uses multicolumns
           to pretty-print MultiIndex columns.
           Valid values: False,True
       """
       
    1: pc_latex_multicolumn_format = """
       : string
           This specifies the format for multicolumn headers.
           Can be surrounded with '|'.
           Valid values: 'l', 'c', 'r', 'p{<width>}'
       """
       
    1: pc_latex_multirow = """
       : bool
           This specifies if the to_latex method of a Dataframe uses multirows
           to pretty-print MultiIndex rows.
           Valid values: False,True
       """
       
       
    1: def table_schema_cb(key):
           from pandas.io.formats.printing import enable_data_resource_formatter
       
           enable_data_resource_formatter(cf.get_option(key))
       
       
    1: def is_terminal() -> bool:
           """
           Detect if Python is running in a terminal.
       
           Returns True if Python is running in a terminal or False if not.
           """
    1:     try:
               # error: Name 'get_ipython' is not defined
    1:         ip = get_ipython()  # type: ignore[name-defined]
    1:     except NameError:  # assume standard Python interpreter in a terminal
    1:         return True
           else:
               if hasattr(ip, "kernel"):  # IPython as a Jupyter kernel
                   return False
               else:  # IPython in a terminal
                   return True
       
       
    1: with cf.config_prefix("display"):
    1:     cf.register_option("precision", 6, pc_precision_doc, validator=is_nonnegative_int)
    2:     cf.register_option(
    1:         "float_format",
    1:         None,
    1:         float_format_doc,
    1:         validator=is_one_of_factory([None, is_callable]),
           )
    1:     cf.register_option("column_space", 12, validator=is_int)
    2:     cf.register_option(
    1:         "max_info_rows",
    1:         1690785,
    1:         pc_max_info_rows_doc,
    1:         validator=is_instance_factory((int, type(None))),
           )
    1:     cf.register_option("max_rows", 60, pc_max_rows_doc, validator=is_nonnegative_int)
    2:     cf.register_option(
    1:         "min_rows",
    1:         10,
    1:         pc_min_rows_doc,
    1:         validator=is_instance_factory([type(None), int]),
           )
    1:     cf.register_option("max_categories", 8, pc_max_categories_doc, validator=is_int)
       
    1:     def _deprecate_negative_int_max_colwidth(key):
               value = cf.get_option(key)
               if value is not None and value < 0:
                   warnings.warn(
                       "Passing a negative integer is deprecated in version 1.0 and "
                       "will not be supported in future version. Instead, use None "
                       "to not limit the column width.",
                       FutureWarning,
                       stacklevel=find_stack_level(),
                   )
       
    2:     cf.register_option(
               # TODO(2.0): change `validator=is_nonnegative_int` see GH#31569
    1:         "max_colwidth",
    1:         50,
    1:         max_colwidth_doc,
    1:         validator=is_instance_factory([type(None), int]),
    1:         cb=_deprecate_negative_int_max_colwidth,
           )
    1:     if is_terminal():
    1:         max_cols = 0  # automatically determine optimal number of columns
           else:
               max_cols = 20  # cannot determine optimal number of columns
    2:     cf.register_option(
    1:         "max_columns", max_cols, pc_max_cols_doc, validator=is_nonnegative_int
           )
    2:     cf.register_option(
    1:         "large_repr",
    1:         "truncate",
    1:         pc_large_repr_doc,
    1:         validator=is_one_of_factory(["truncate", "info"]),
           )
    1:     cf.register_option("max_info_columns", 100, pc_max_info_cols_doc, validator=is_int)
    2:     cf.register_option(
    1:         "colheader_justify", "right", colheader_justify_doc, validator=is_text
           )
    1:     cf.register_option("notebook_repr_html", True, pc_nb_repr_h_doc, validator=is_bool)
    1:     cf.register_option("pprint_nest_depth", 3, pc_pprint_nest_depth, validator=is_int)
    1:     cf.register_option("multi_sparse", True, pc_multi_sparse_doc, validator=is_bool)
    1:     cf.register_option("expand_frame_repr", True, pc_expand_repr_doc)
    2:     cf.register_option(
    1:         "show_dimensions",
    1:         "truncate",
    1:         pc_show_dimensions_doc,
    1:         validator=is_one_of_factory([True, False, "truncate"]),
           )
    1:     cf.register_option("chop_threshold", None, pc_chop_threshold_doc)
    1:     cf.register_option("max_seq_items", 100, pc_max_seq_items)
    2:     cf.register_option(
    1:         "width", 80, pc_width_doc, validator=is_instance_factory([type(None), int])
           )
    2:     cf.register_option(
    1:         "memory_usage",
    1:         True,
    1:         pc_memory_usage_doc,
    1:         validator=is_one_of_factory([None, True, False, "deep"]),
           )
    2:     cf.register_option(
    1:         "unicode.east_asian_width", False, pc_east_asian_width_doc, validator=is_bool
           )
    2:     cf.register_option(
    1:         "unicode.ambiguous_as_wide", False, pc_east_asian_width_doc, validator=is_bool
           )
    1:     cf.register_option("latex.repr", False, pc_latex_repr_doc, validator=is_bool)
    1:     cf.register_option("latex.escape", True, pc_latex_escape, validator=is_bool)
    1:     cf.register_option("latex.longtable", False, pc_latex_longtable, validator=is_bool)
    2:     cf.register_option(
    1:         "latex.multicolumn", True, pc_latex_multicolumn, validator=is_bool
           )
    2:     cf.register_option(
    1:         "latex.multicolumn_format", "l", pc_latex_multicolumn, validator=is_text
           )
    1:     cf.register_option("latex.multirow", False, pc_latex_multirow, validator=is_bool)
    2:     cf.register_option(
    1:         "html.table_schema",
    1:         False,
    1:         pc_table_schema_doc,
    1:         validator=is_bool,
    1:         cb=table_schema_cb,
           )
    1:     cf.register_option("html.border", 1, pc_html_border_doc, validator=is_int)
    2:     cf.register_option(
    1:         "html.use_mathjax", True, pc_html_use_mathjax_doc, validator=is_bool
           )
    2:     cf.register_option(
    1:         "max_dir_items", 100, pc_max_dir_items, validator=is_nonnegative_int
           )
       
    1: tc_sim_interactive_doc = """
       : boolean
           Whether to simulate interactive mode for purposes of testing
       """
       
    1: with cf.config_prefix("mode"):
    1:     cf.register_option("sim_interactive", False, tc_sim_interactive_doc)
       
    1: use_inf_as_null_doc = """
       : boolean
           use_inf_as_null had been deprecated and will be removed in a future
           version. Use `use_inf_as_na` instead.
       """
       
    1: use_inf_as_na_doc = """
       : boolean
           True means treat None, NaN, INF, -INF as NA (old way),
           False means None and NaN are null, but INF, -INF are not NA
           (new way).
       """
       
       # We don't want to start importing everything at the global context level
       # or we'll hit circular deps.
       
       
    1: def use_inf_as_na_cb(key):
           from pandas.core.dtypes.missing import _use_inf_as_na
       
           _use_inf_as_na(key)
       
       
    1: with cf.config_prefix("mode"):
    1:     cf.register_option("use_inf_as_na", False, use_inf_as_na_doc, cb=use_inf_as_na_cb)
    2:     cf.register_option(
    1:         "use_inf_as_null", False, use_inf_as_null_doc, cb=use_inf_as_na_cb
           )
       
       
    2: cf.deprecate_option(
    1:     "mode.use_inf_as_null", msg=use_inf_as_null_doc, rkey="mode.use_inf_as_na"
       )
       
       
    1: data_manager_doc = """
       : string
           Internal data manager type; can be "block" or "array". Defaults to "block",
           unless overridden by the 'PANDAS_DATA_MANAGER' environment variable (needs
           to be set before pandas is imported).
       """
       
       
    1: with cf.config_prefix("mode"):
    2:     cf.register_option(
    1:         "data_manager",
               # Get the default from an environment variable, if set, otherwise defaults
               # to "block". This environment variable can be set for testing.
    1:         os.environ.get("PANDAS_DATA_MANAGER", "block"),
    1:         data_manager_doc,
    1:         validator=is_one_of_factory(["block", "array"]),
           )
       
       
       # user warnings
    1: chained_assignment = """
       : string
           Raise an exception, warn, or no action if trying to use chained assignment,
           The default is warn
       """
       
    1: with cf.config_prefix("mode"):
    2:     cf.register_option(
    1:         "chained_assignment",
    1:         "warn",
    1:         chained_assignment,
    1:         validator=is_one_of_factory([None, "warn", "raise"]),
           )
       
       
    1: string_storage_doc = """
       : string
           The default storage for StringDtype.
       """
       
    1: with cf.config_prefix("mode"):
    2:     cf.register_option(
    1:         "string_storage",
    1:         "python",
    1:         string_storage_doc,
    1:         validator=is_one_of_factory(["python", "pyarrow"]),
           )
       
       # Set up the io.excel specific reader configuration.
    1: reader_engine_doc = """
       : string
           The default Excel reader engine for '{ext}' files. Available options:
           auto, {others}.
       """
       
    1: _xls_options = ["xlrd"]
    1: _xlsm_options = ["xlrd", "openpyxl"]
    1: _xlsx_options = ["xlrd", "openpyxl"]
    1: _ods_options = ["odf"]
    1: _xlsb_options = ["pyxlsb"]
       
       
    1: with cf.config_prefix("io.excel.xls"):
    2:     cf.register_option(
    1:         "reader",
    1:         "auto",
    1:         reader_engine_doc.format(ext="xls", others=", ".join(_xls_options)),
    1:         validator=is_one_of_factory(_xls_options + ["auto"]),
           )
       
    1: with cf.config_prefix("io.excel.xlsm"):
    2:     cf.register_option(
    1:         "reader",
    1:         "auto",
    1:         reader_engine_doc.format(ext="xlsm", others=", ".join(_xlsm_options)),
    1:         validator=is_one_of_factory(_xlsm_options + ["auto"]),
           )
       
       
    1: with cf.config_prefix("io.excel.xlsx"):
    2:     cf.register_option(
    1:         "reader",
    1:         "auto",
    1:         reader_engine_doc.format(ext="xlsx", others=", ".join(_xlsx_options)),
    1:         validator=is_one_of_factory(_xlsx_options + ["auto"]),
           )
       
       
    1: with cf.config_prefix("io.excel.ods"):
    2:     cf.register_option(
    1:         "reader",
    1:         "auto",
    1:         reader_engine_doc.format(ext="ods", others=", ".join(_ods_options)),
    1:         validator=is_one_of_factory(_ods_options + ["auto"]),
           )
       
    1: with cf.config_prefix("io.excel.xlsb"):
    2:     cf.register_option(
    1:         "reader",
    1:         "auto",
    1:         reader_engine_doc.format(ext="xlsb", others=", ".join(_xlsb_options)),
    1:         validator=is_one_of_factory(_xlsb_options + ["auto"]),
           )
       
       # Set up the io.excel specific writer configuration.
    1: writer_engine_doc = """
       : string
           The default Excel writer engine for '{ext}' files. Available options:
           auto, {others}.
       """
       
    1: _xls_options = ["xlwt"]
    1: _xlsm_options = ["openpyxl"]
    1: _xlsx_options = ["openpyxl", "xlsxwriter"]
    1: _ods_options = ["odf"]
       
       
    1: with cf.config_prefix("io.excel.xls"):
    2:     cf.register_option(
    1:         "writer",
    1:         "auto",
    1:         writer_engine_doc.format(ext="xls", others=", ".join(_xls_options)),
    1:         validator=str,
           )
    2: cf.deprecate_option(
    1:     "io.excel.xls.writer",
    1:     msg="As the xlwt package is no longer maintained, the xlwt engine will be "
           "removed in a future version of pandas. This is the only engine in pandas that "
           "supports writing in the xls format. Install openpyxl and write to an "
           "xlsx file instead.",
       )
       
    1: with cf.config_prefix("io.excel.xlsm"):
    2:     cf.register_option(
    1:         "writer",
    1:         "auto",
    1:         writer_engine_doc.format(ext="xlsm", others=", ".join(_xlsm_options)),
    1:         validator=str,
           )
       
       
    1: with cf.config_prefix("io.excel.xlsx"):
    2:     cf.register_option(
    1:         "writer",
    1:         "auto",
    1:         writer_engine_doc.format(ext="xlsx", others=", ".join(_xlsx_options)),
    1:         validator=str,
           )
       
       
    1: with cf.config_prefix("io.excel.ods"):
    2:     cf.register_option(
    1:         "writer",
    1:         "auto",
    1:         writer_engine_doc.format(ext="ods", others=", ".join(_ods_options)),
    1:         validator=str,
           )
       
       
       # Set up the io.parquet specific configuration.
    1: parquet_engine_doc = """
       : string
           The default parquet reader/writer engine. Available options:
           'auto', 'pyarrow', 'fastparquet', the default is 'auto'
       """
       
    1: with cf.config_prefix("io.parquet"):
    2:     cf.register_option(
    1:         "engine",
    1:         "auto",
    1:         parquet_engine_doc,
    1:         validator=is_one_of_factory(["auto", "pyarrow", "fastparquet"]),
           )
       
       
       # Set up the io.sql specific configuration.
    1: sql_engine_doc = """
       : string
           The default sql reader/writer engine. Available options:
           'auto', 'sqlalchemy', the default is 'auto'
       """
       
    1: with cf.config_prefix("io.sql"):
    2:     cf.register_option(
    1:         "engine",
    1:         "auto",
    1:         sql_engine_doc,
    1:         validator=is_one_of_factory(["auto", "sqlalchemy"]),
           )
       
       # --------
       # Plotting
       # ---------
       
    1: plotting_backend_doc = """
       : str
           The plotting backend to use. The default value is "matplotlib", the
           backend provided with pandas. Other backends can be specified by
           providing the name of the module that implements the backend.
       """
       
       
    1: def register_plotting_backend_cb(key):
    1:     if key == "matplotlib":
               # We defer matplotlib validation, since it's the default
    1:         return
           from pandas.plotting._core import _get_plot_backend
       
           _get_plot_backend(key)
       
       
    1: with cf.config_prefix("plotting"):
    2:     cf.register_option(
    1:         "backend",
    1:         defval="matplotlib",
    1:         doc=plotting_backend_doc,
    1:         validator=register_plotting_backend_cb,
           )
       
       
    1: register_converter_doc = """
       : bool or 'auto'.
           Whether to register converters with matplotlib's units registry for
           dates, times, datetimes, and Periods. Toggling to False will remove
           the converters, restoring any converters that pandas overwrote.
       """
       
       
    1: def register_converter_cb(key):
           from pandas.plotting import (
               deregister_matplotlib_converters,
               register_matplotlib_converters,
           )
       
           if cf.get_option(key):
               register_matplotlib_converters()
           else:
               deregister_matplotlib_converters()
       
       
    1: with cf.config_prefix("plotting.matplotlib"):
    2:     cf.register_option(
    1:         "register_converters",
    1:         "auto",
    1:         register_converter_doc,
    1:         validator=is_one_of_factory(["auto", True, False]),
    1:         cb=register_converter_cb,
           )
       
       # ------
       # Styler
       # ------
       
    1: styler_sparse_index_doc = """
       : bool
           Whether to sparsify the display of a hierarchical index. Setting to False will
           display each explicit level element in a hierarchical key for each row.
       """
       
    1: styler_sparse_columns_doc = """
       : bool
           Whether to sparsify the display of hierarchical columns. Setting to False will
           display each explicit level element in a hierarchical key for each column.
       """
       
    1: styler_render_repr = """
       : str
           Determine which output to use in Jupyter Notebook in {"html", "latex"}.
       """
       
    1: styler_max_elements = """
       : int
           The maximum number of data-cell (<td>) elements that will be rendered before
           trimming will occur over columns, rows or both if needed.
       """
       
    1: styler_max_rows = """
       : int, optional
           The maximum number of rows that will be rendered. May still be reduced to
           satsify ``max_elements``, which takes precedence.
       """
       
    1: styler_max_columns = """
       : int, optional
           The maximum number of columns that will be rendered. May still be reduced to
           satsify ``max_elements``, which takes precedence.
       """
       
    1: styler_precision = """
       : int
           The precision for floats and complex numbers.
       """
       
    1: styler_decimal = """
       : str
           The character representation for the decimal separator for floats and complex.
       """
       
    1: styler_thousands = """
       : str, optional
           The character representation for thousands separator for floats, int and complex.
       """
       
    1: styler_na_rep = """
       : str, optional
           The string representation for values identified as missing.
       """
       
    1: styler_escape = """
       : str, optional
           Whether to escape certain characters according to the given context; html or latex.
       """
       
    1: styler_formatter = """
       : str, callable, dict, optional
           A formatter object to be used as default within ``Styler.format``.
       """
       
    1: styler_multirow_align = """
       : {"c", "t", "b"}
           The specifier for vertical alignment of sparsified LaTeX multirows.
       """
       
    1: styler_multicol_align = r"""
       : {"r", "c", "l", "naive-l", "naive-r"}
           The specifier for horizontal alignment of sparsified LaTeX multicolumns. Pipe
           decorators can also be added to non-naive values to draw vertical
           rules, e.g. "\|r" will draw a rule on the left side of right aligned merged cells.
       """
       
    1: styler_hrules = """
       : bool
           Whether to add horizontal rules on top and bottom and below the headers.
       """
       
    1: styler_environment = """
       : str
           The environment to replace ``\\begin{table}``. If "longtable" is used results
           in a specific longtable environment format.
       """
       
    1: styler_encoding = """
       : str
           The encoding used for output HTML and LaTeX files.
       """
       
    1: styler_mathjax = """
       : bool
           If False will render special CSS classes to table attributes that indicate Mathjax
           will not be used in Jupyter Notebook.
       """
       
    1: with cf.config_prefix("styler"):
    1:     cf.register_option("sparse.index", True, styler_sparse_index_doc, validator=is_bool)
       
    2:     cf.register_option(
    1:         "sparse.columns", True, styler_sparse_columns_doc, validator=is_bool
           )
       
    2:     cf.register_option(
    1:         "render.repr",
    1:         "html",
    1:         styler_render_repr,
    1:         validator=is_one_of_factory(["html", "latex"]),
           )
       
    2:     cf.register_option(
    1:         "render.max_elements",
    1:         2 ** 18,
    1:         styler_max_elements,
    1:         validator=is_nonnegative_int,
           )
       
    2:     cf.register_option(
    1:         "render.max_rows",
    1:         None,
    1:         styler_max_rows,
    1:         validator=is_nonnegative_int,
           )
       
    2:     cf.register_option(
    1:         "render.max_columns",
    1:         None,
    1:         styler_max_columns,
    1:         validator=is_nonnegative_int,
           )
       
    1:     cf.register_option("render.encoding", "utf-8", styler_encoding, validator=is_str)
       
    1:     cf.register_option("format.decimal", ".", styler_decimal, validator=is_str)
       
    2:     cf.register_option(
    1:         "format.precision", 6, styler_precision, validator=is_nonnegative_int
           )
       
    2:     cf.register_option(
    1:         "format.thousands",
    1:         None,
    1:         styler_thousands,
    1:         validator=is_instance_factory([type(None), str]),
           )
       
    2:     cf.register_option(
    1:         "format.na_rep",
    1:         None,
    1:         styler_na_rep,
    1:         validator=is_instance_factory([type(None), str]),
           )
       
    2:     cf.register_option(
    1:         "format.escape",
    1:         None,
    1:         styler_escape,
    1:         validator=is_one_of_factory([None, "html", "latex"]),
           )
       
    2:     cf.register_option(
    1:         "format.formatter",
    1:         None,
    1:         styler_formatter,
    1:         validator=is_instance_factory([type(None), dict, Callable, str]),
           )
       
    1:     cf.register_option("html.mathjax", True, styler_mathjax, validator=is_bool)
       
    2:     cf.register_option(
    1:         "latex.multirow_align",
    1:         "c",
    1:         styler_multirow_align,
    1:         validator=is_one_of_factory(["c", "t", "b", "naive"]),
           )
       
    1:     val_mca = ["r", "|r|", "|r", "r|", "c", "|c|", "|c", "c|", "l", "|l|", "|l", "l|"]
    1:     val_mca += ["naive-l", "naive-r"]
    2:     cf.register_option(
    1:         "latex.multicol_align",
    1:         "r",
    1:         styler_multicol_align,
    1:         validator=is_one_of_factory(val_mca),
           )
       
    1:     cf.register_option("latex.hrules", False, styler_hrules, validator=is_bool)
       
    2:     cf.register_option(
    1:         "latex.environment",
    1:         None,
    1:         styler_environment,
    1:         validator=is_instance_factory([type(None), str]),
           )
