    1: from __future__ import annotations
       
    1: import importlib
    1: import sys
    1: import types
    1: import warnings
       
    1: from pandas.util.version import Version
       
       # Update install.rst when updating versions!
       
    1: VERSIONS = {
    1:     "bs4": "4.8.2",
    1:     "blosc": "1.20.1",
    1:     "bottleneck": "1.3.1",
    1:     "fastparquet": "0.4.0",
    1:     "fsspec": "0.7.4",
    1:     "html5lib": "1.1",
    1:     "gcsfs": "0.6.0",
    1:     "jinja2": "2.11",
    1:     "lxml.etree": "4.5.0",
    1:     "matplotlib": "3.3.2",
    1:     "numba": "0.50.1",
    1:     "numexpr": "2.7.1",
    1:     "odfpy": "1.4.1",
    1:     "openpyxl": "3.0.3",
    1:     "pandas_gbq": "0.14.0",
    1:     "psycopg2": "2.8.4",  # (dt dec pq3 ext lo64)
    1:     "pymysql": "0.10.1",
    1:     "pyarrow": "1.0.1",
    1:     "pyreadstat": "1.1.0",
    1:     "pytest": "6.0",
    1:     "pyxlsb": "1.0.6",
    1:     "s3fs": "0.4.0",
    1:     "scipy": "1.4.1",
    1:     "sqlalchemy": "1.4.0",
    1:     "tables": "3.6.1",
    1:     "tabulate": "0.8.7",
    1:     "xarray": "0.15.1",
    1:     "xlrd": "2.0.1",
    1:     "xlwt": "1.3.0",
    1:     "xlsxwriter": "1.2.2",
    1:     "zstandard": "0.15.2",
       }
       
       # A mapping from import name to package name (on PyPI) for packages where
       # these two names are different.
       
    1: INSTALL_MAPPING = {
    1:     "bs4": "beautifulsoup4",
    1:     "bottleneck": "Bottleneck",
    1:     "lxml.etree": "lxml",
    1:     "odf": "odfpy",
    1:     "pandas_gbq": "pandas-gbq",
    1:     "tables": "pytables",
    1:     "sqlalchemy": "SQLAlchemy",
    1:     "jinja2": "Jinja2",
       }
       
       
    1: def get_version(module: types.ModuleType) -> str:
    2:     version = getattr(module, "__version__", None)
    2:     if version is None:
               # xlrd uses a capitalized attribute name
               version = getattr(module, "__VERSION__", None)
       
    2:     if version is None:
               raise ImportError(f"Can't determine version for {module.__name__}")
    2:     if module.__name__ == "psycopg2":
               # psycopg2 appends " (dt dec pq3 ext lo64)" to it's version
               version = version.split()[0]
    2:     return version
       
       
    1: def import_optional_dependency(
           name: str,
           extra: str = "",
           errors: str = "raise",
           min_version: str | None = None,
       ):
           """
           Import an optional dependency.
       
           By default, if a dependency is missing an ImportError with a nice
           message will be raised. If a dependency is present, but too old,
           we raise.
       
           Parameters
           ----------
           name : str
               The module name.
           extra : str
               Additional text to include in the ImportError message.
           errors : str {'raise', 'warn', 'ignore'}
               What to do when a dependency is not found or its version is too old.
       
               * raise : Raise an ImportError
               * warn : Only applicable when a module's version is to old.
                 Warns that the version is too old and returns None
               * ignore: If the module is not installed, return None, otherwise,
                 return the module, even if the version is too old.
                 It's expected that users validate the version locally when
                 using ``errors="ignore"`` (see. ``io/html.py``)
           min_version : str, default None
               Specify a minimum version that is different from the global pandas
               minimum version required.
           Returns
           -------
           maybe_module : Optional[ModuleType]
               The imported module, when found and the version is correct.
               None is returned when the package is not found and `errors`
               is False, or when the package's version is too old and `errors`
               is ``'warn'``.
           """
       
    3:     assert errors in {"warn", "raise", "ignore"}
       
    3:     package_name = INSTALL_MAPPING.get(name)
    3:     install_name = package_name if package_name is not None else name
       
    3:     msg = (
    3:         f"Missing optional dependency '{install_name}'. {extra} "
               f"Use pip or conda to install {install_name}."
           )
    3:     try:
    3:         module = importlib.import_module(name)
    1:     except ImportError:
    1:         if errors == "raise":
                   raise ImportError(msg)
               else:
    1:             return None
       
           # Handle submodules: if we have submodule, grab parent module from sys.modules
    2:     parent = name.split(".")[0]
    2:     if parent != name:
               install_name = parent
               module_to_get = sys.modules[install_name]
           else:
    2:         module_to_get = module
    2:     minimum_version = min_version if min_version is not None else VERSIONS.get(parent)
    2:     if minimum_version:
    2:         version = get_version(module_to_get)
    2:         if Version(version) < Version(minimum_version):
                   msg = (
                       f"Pandas requires version '{minimum_version}' or newer of '{parent}' "
                       f"(version '{version}' currently installed)."
                   )
                   if errors == "warn":
                       warnings.warn(msg, UserWarning)
                       return None
                   elif errors == "raise":
                       raise ImportError(msg)
       
    2:     return module
