    1: """ define generic base classes for pandas objects """
    1: from __future__ import annotations
       
    1: from typing import (
           TYPE_CHECKING,
           Type,
           cast,
       )
       
    1: if TYPE_CHECKING:
           from pandas import (
               Categorical,
               CategoricalIndex,
               DataFrame,
               DatetimeIndex,
               Float64Index,
               Index,
               Int64Index,
               IntervalIndex,
               MultiIndex,
               PeriodIndex,
               RangeIndex,
               Series,
               TimedeltaIndex,
               UInt64Index,
           )
           from pandas.core.arrays import (
               DatetimeArray,
               ExtensionArray,
               PandasArray,
               PeriodArray,
               TimedeltaArray,
           )
           from pandas.core.generic import NDFrame
       
       
       # define abstract base classes to enable isinstance type checking on our
       # objects
    1: def create_pandas_abc_type(name, attr, comp):
       
           # https://github.com/python/mypy/issues/1006
           # error: 'classmethod' used with a non-method
   20:     @classmethod  # type: ignore[misc]
   20:     def _check(cls, inst) -> bool:
31510:         return getattr(inst, attr, "_typ") in comp
       
   20:     dct = {"__instancecheck__": _check, "__subclasscheck__": _check}
   20:     meta = type("ABCBase", (type,), dct)
   20:     return meta(name, (), dct)
       
       
    2: ABCInt64Index = cast(
    1:     "Type[Int64Index]",
    1:     create_pandas_abc_type("ABCInt64Index", "_typ", ("int64index",)),
       )
    2: ABCUInt64Index = cast(
    1:     "Type[UInt64Index]",
    1:     create_pandas_abc_type("ABCUInt64Index", "_typ", ("uint64index",)),
       )
    2: ABCRangeIndex = cast(
    1:     "Type[RangeIndex]",
    1:     create_pandas_abc_type("ABCRangeIndex", "_typ", ("rangeindex",)),
       )
    2: ABCFloat64Index = cast(
    1:     "Type[Float64Index]",
    1:     create_pandas_abc_type("ABCFloat64Index", "_typ", ("float64index",)),
       )
    2: ABCMultiIndex = cast(
    1:     "Type[MultiIndex]",
    1:     create_pandas_abc_type("ABCMultiIndex", "_typ", ("multiindex",)),
       )
    2: ABCDatetimeIndex = cast(
    1:     "Type[DatetimeIndex]",
    1:     create_pandas_abc_type("ABCDatetimeIndex", "_typ", ("datetimeindex",)),
       )
    2: ABCTimedeltaIndex = cast(
    1:     "Type[TimedeltaIndex]",
    1:     create_pandas_abc_type("ABCTimedeltaIndex", "_typ", ("timedeltaindex",)),
       )
    2: ABCPeriodIndex = cast(
    1:     "Type[PeriodIndex]",
    1:     create_pandas_abc_type("ABCPeriodIndex", "_typ", ("periodindex",)),
       )
    2: ABCCategoricalIndex = cast(
    1:     "Type[CategoricalIndex]",
    1:     create_pandas_abc_type("ABCCategoricalIndex", "_typ", ("categoricalindex",)),
       )
    2: ABCIntervalIndex = cast(
    1:     "Type[IntervalIndex]",
    1:     create_pandas_abc_type("ABCIntervalIndex", "_typ", ("intervalindex",)),
       )
    2: ABCIndex = cast(
    1:     "Type[Index]",
    2:     create_pandas_abc_type(
    1:         "ABCIndex",
    1:         "_typ",
    1:         {
    1:             "index",
    1:             "int64index",
    1:             "rangeindex",
    1:             "float64index",
    1:             "uint64index",
    1:             "numericindex",
    1:             "multiindex",
    1:             "datetimeindex",
    1:             "timedeltaindex",
    1:             "periodindex",
    1:             "categoricalindex",
    1:             "intervalindex",
               },
           ),
       )
       
       
    2: ABCNDFrame = cast(
    1:     "Type[NDFrame]",
    1:     create_pandas_abc_type("ABCNDFrame", "_typ", ("series", "dataframe")),
       )
    2: ABCSeries = cast(
    1:     "Type[Series]",
    1:     create_pandas_abc_type("ABCSeries", "_typ", ("series",)),
       )
    2: ABCDataFrame = cast(
    1:     "Type[DataFrame]", create_pandas_abc_type("ABCDataFrame", "_typ", ("dataframe",))
       )
       
    2: ABCCategorical = cast(
    1:     "Type[Categorical]",
    1:     create_pandas_abc_type("ABCCategorical", "_typ", ("categorical")),
       )
    2: ABCDatetimeArray = cast(
    1:     "Type[DatetimeArray]",
    1:     create_pandas_abc_type("ABCDatetimeArray", "_typ", ("datetimearray")),
       )
    2: ABCTimedeltaArray = cast(
    1:     "Type[TimedeltaArray]",
    1:     create_pandas_abc_type("ABCTimedeltaArray", "_typ", ("timedeltaarray")),
       )
    2: ABCPeriodArray = cast(
    1:     "Type[PeriodArray]",
    1:     create_pandas_abc_type("ABCPeriodArray", "_typ", ("periodarray",)),
       )
    2: ABCExtensionArray = cast(
    1:     "Type[ExtensionArray]",
    2:     create_pandas_abc_type(
    1:         "ABCExtensionArray",
    1:         "_typ",
               # Note: IntervalArray and SparseArray are included bc they have _typ="extension"
    1:         {"extension", "categorical", "periodarray", "datetimearray", "timedeltaarray"},
           ),
       )
    2: ABCPandasArray = cast(
    1:     "Type[PandasArray]",
    1:     create_pandas_abc_type("ABCPandasArray", "_typ", ("npy_extension",)),
       )
