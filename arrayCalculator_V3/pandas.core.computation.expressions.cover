    1: """
       Expressions
       -----------
       
       Offer fast expression evaluation through numexpr
       
       """
    1: from __future__ import annotations
       
    1: import operator
    1: import warnings
       
    1: import numpy as np
       
    1: from pandas._config import get_option
       
    1: from pandas._typing import FuncType
       
    1: from pandas.core.computation.check import NUMEXPR_INSTALLED
    1: from pandas.core.ops import roperator
       
    1: if NUMEXPR_INSTALLED:
    1:     import numexpr as ne
       
    1: _TEST_MODE: bool | None = None
    1: _TEST_RESULT: list[bool] = []
    1: USE_NUMEXPR = NUMEXPR_INSTALLED
    1: _evaluate: FuncType | None = None
    1: _where: FuncType | None = None
       
       # the set of dtypes that we will allow pass to numexpr
    1: _ALLOWED_DTYPES = {
    1:     "evaluate": {"int64", "int32", "float64", "float32", "bool"},
    1:     "where": {"int64", "float64", "bool"},
       }
       
       # the minimum prod shape that we will use numexpr
    1: _MIN_ELEMENTS = 1_000_000
       
       
    1: def set_use_numexpr(v=True):
           # set/unset to use numexpr
           global USE_NUMEXPR
    1:     if NUMEXPR_INSTALLED:
    1:         USE_NUMEXPR = v
       
           # choose what we are going to do
           global _evaluate, _where
       
    1:     _evaluate = _evaluate_numexpr if USE_NUMEXPR else _evaluate_standard
    1:     _where = _where_numexpr if USE_NUMEXPR else _where_standard
       
       
    1: def set_numexpr_threads(n=None):
           # if we are using numexpr, set the threads to n
           # otherwise reset
           if NUMEXPR_INSTALLED and USE_NUMEXPR:
               if n is None:
                   n = ne.detect_number_of_cores()
               ne.set_num_threads(n)
       
       
    1: def _evaluate_standard(op, op_str, a, b):
           """
           Standard evaluation.
           """
           if _TEST_MODE:
               _store_test_result(False)
           return op(a, b)
       
       
    1: def _can_use_numexpr(op, op_str, a, b, dtype_check):
           """return a boolean if we WILL be using numexpr"""
           if op_str is not None:
       
               # required min elements (otherwise we are adding overhead)
               if a.size > _MIN_ELEMENTS:
                   # check for dtype compatibility
                   dtypes: set[str] = set()
                   for o in [a, b]:
                       # ndarray and Series Case
                       if hasattr(o, "dtype"):
                           dtypes |= {o.dtype.name}
       
                   # allowed are a superset
                   if not len(dtypes) or _ALLOWED_DTYPES[dtype_check] >= dtypes:
                       return True
       
           return False
       
       
    1: def _evaluate_numexpr(op, op_str, a, b):
           result = None
       
           if _can_use_numexpr(op, op_str, a, b, "evaluate"):
               is_reversed = op.__name__.strip("_").startswith("r")
               if is_reversed:
                   # we were originally called by a reversed op method
                   a, b = b, a
       
               a_value = a
               b_value = b
       
               try:
                   result = ne.evaluate(
                       f"a_value {op_str} b_value",
                       local_dict={"a_value": a_value, "b_value": b_value},
                       casting="safe",
                   )
               except TypeError:
                   # numexpr raises eg for array ** array with integers
                   # (https://github.com/pydata/numexpr/issues/379)
                   pass
               except NotImplementedError:
                   if _bool_arith_fallback(op_str, a, b):
                       pass
                   else:
                       raise
       
               if is_reversed:
                   # reverse order to original for fallback
                   a, b = b, a
       
           if _TEST_MODE:
               _store_test_result(result is not None)
       
           if result is None:
               result = _evaluate_standard(op, op_str, a, b)
       
           return result
       
       
    1: _op_str_mapping = {
    1:     operator.add: "+",
    1:     roperator.radd: "+",
    1:     operator.mul: "*",
    1:     roperator.rmul: "*",
    1:     operator.sub: "-",
    1:     roperator.rsub: "-",
    1:     operator.truediv: "/",
    1:     roperator.rtruediv: "/",
           # floordiv not supported by numexpr 2.x
    1:     operator.floordiv: None,
    1:     roperator.rfloordiv: None,
           # we require Python semantics for mod of negative for backwards compatibility
           # see https://github.com/pydata/numexpr/issues/365
           # so sticking with unaccelerated for now GH#36552
    1:     operator.mod: None,
    1:     roperator.rmod: None,
    1:     operator.pow: "**",
    1:     roperator.rpow: "**",
    1:     operator.eq: "==",
    1:     operator.ne: "!=",
    1:     operator.le: "<=",
    1:     operator.lt: "<",
    1:     operator.ge: ">=",
    1:     operator.gt: ">",
    1:     operator.and_: "&",
    1:     roperator.rand_: "&",
    1:     operator.or_: "|",
    1:     roperator.ror_: "|",
    1:     operator.xor: "^",
    1:     roperator.rxor: "^",
    1:     divmod: None,
    1:     roperator.rdivmod: None,
       }
       
       
    1: def _where_standard(cond, a, b):
           # Caller is responsible for extracting ndarray if necessary
           return np.where(cond, a, b)
       
       
    1: def _where_numexpr(cond, a, b):
           # Caller is responsible for extracting ndarray if necessary
           result = None
       
           if _can_use_numexpr(None, "where", a, b, "where"):
       
               result = ne.evaluate(
                   "where(cond_value, a_value, b_value)",
                   local_dict={"cond_value": cond, "a_value": a, "b_value": b},
                   casting="safe",
               )
       
           if result is None:
               result = _where_standard(cond, a, b)
       
           return result
       
       
       # turn myself on
    1: set_use_numexpr(get_option("compute.use_numexpr"))
       
       
    1: def _has_bool_dtype(x):
           try:
               return x.dtype == bool
           except AttributeError:
               return isinstance(x, (bool, np.bool_))
       
       
    1: _BOOL_OP_UNSUPPORTED = {"+": "|", "*": "&", "-": "^"}
       
       
    1: def _bool_arith_fallback(op_str, a, b):
           """
           Check if we should fallback to the python `_evaluate_standard` in case
           of an unsupported operation by numexpr, which is the case for some
           boolean ops.
           """
           if _has_bool_dtype(a) and _has_bool_dtype(b):
               if op_str in _BOOL_OP_UNSUPPORTED:
                   warnings.warn(
                       f"evaluating in Python space because the {repr(op_str)} "
                       "operator is not supported by numexpr for the bool dtype, "
                       f"use {repr(_BOOL_OP_UNSUPPORTED[op_str])} instead."
                   )
                   return True
           return False
       
       
    1: def evaluate(op, a, b, use_numexpr: bool = True):
           """
           Evaluate and return the expression of the op on a and b.
       
           Parameters
           ----------
           op : the actual operand
           a : left operand
           b : right operand
           use_numexpr : bool, default True
               Whether to try to use numexpr.
           """
           op_str = _op_str_mapping[op]
           if op_str is not None:
               if use_numexpr:
                   # error: "None" not callable
                   return _evaluate(op, op_str, a, b)  # type: ignore[misc]
           return _evaluate_standard(op, op_str, a, b)
       
       
    1: def where(cond, a, b, use_numexpr=True):
           """
           Evaluate the where condition cond on a and b.
       
           Parameters
           ----------
           cond : np.ndarray[bool]
           a : return if cond is True
           b : return if cond is False
           use_numexpr : bool, default True
               Whether to try to use numexpr.
           """
           assert _where is not None
           return _where(cond, a, b) if use_numexpr else _where_standard(cond, a, b)
       
       
    1: def set_test_mode(v: bool = True) -> None:
           """
           Keeps track of whether numexpr was used.
       
           Stores an additional ``True`` for every successful use of evaluate with
           numexpr since the last ``get_test_result``.
           """
           global _TEST_MODE, _TEST_RESULT
           _TEST_MODE = v
           _TEST_RESULT = []
       
       
    1: def _store_test_result(used_numexpr: bool) -> None:
           global _TEST_RESULT
           if used_numexpr:
               _TEST_RESULT.append(used_numexpr)
       
       
    1: def get_test_result() -> list[bool]:
           """
           Get test result and reset test_results.
           """
           global _TEST_RESULT
           res = _TEST_RESULT
           _TEST_RESULT = []
           return res
