    1: from __future__ import annotations
       
    1: from typing import overload
       
    1: import numpy as np
       
    1: from pandas._libs import (
           lib,
           missing as libmissing,
       )
    1: from pandas._typing import (
           ArrayLike,
           AstypeArg,
           Dtype,
           DtypeObj,
           npt,
       )
    1: from pandas.util._decorators import cache_readonly
       
    1: from pandas.core.dtypes.base import (
           ExtensionDtype,
           register_extension_dtype,
       )
    1: from pandas.core.dtypes.common import (
           is_bool_dtype,
           is_datetime64_dtype,
           is_float_dtype,
           is_integer_dtype,
           is_object_dtype,
           is_string_dtype,
           pandas_dtype,
       )
       
    1: from pandas.core.arrays import ExtensionArray
    1: from pandas.core.arrays.masked import BaseMaskedDtype
    1: from pandas.core.arrays.numeric import (
           NumericArray,
           NumericDtype,
       )
    1: from pandas.core.tools.numeric import to_numeric
       
       
    2: class _IntegerDtype(NumericDtype):
    1:     """
           An ExtensionDtype to hold a single size & kind of integer dtype.
       
           These specific implementations are subclasses of the non-public
           _IntegerDtype. For example we have Int8Dtype to represent signed int 8s.
       
           The attributes name & type are set when these subclasses are created.
           """
       
    1:     def __repr__(self) -> str:
               sign = "U" if self.is_unsigned_integer else ""
               return f"{sign}Int{8 * self.itemsize}Dtype()"
       
    1:     @cache_readonly
    1:     def is_signed_integer(self) -> bool:
               return self.kind == "i"
       
    1:     @cache_readonly
    1:     def is_unsigned_integer(self) -> bool:
               return self.kind == "u"
       
    1:     @property
    1:     def _is_numeric(self) -> bool:
               return True
       
    1:     @classmethod
    1:     def construct_array_type(cls) -> type[IntegerArray]:
               """
               Return the array type associated with this dtype.
       
               Returns
               -------
               type
               """
               return IntegerArray
       
    1:     def _get_common_dtype(self, dtypes: list[DtypeObj]) -> DtypeObj | None:
               # we only handle nullable EA dtypes and numeric numpy dtypes
               if not all(
                   isinstance(t, BaseMaskedDtype)
                   or (
                       isinstance(t, np.dtype)
                       and (np.issubdtype(t, np.number) or np.issubdtype(t, np.bool_))
                   )
                   for t in dtypes
               ):
                   return None
               np_dtype = np.find_common_type(
                   # error: List comprehension has incompatible type List[Union[Any,
                   # dtype, ExtensionDtype]]; expected List[Union[dtype, None, type,
                   # _SupportsDtype, str, Tuple[Any, Union[int, Sequence[int]]],
                   # List[Any], _DtypeDict, Tuple[Any, Any]]]
                   [
                       t.numpy_dtype  # type: ignore[misc]
                       if isinstance(t, BaseMaskedDtype)
                       else t
                       for t in dtypes
                   ],
                   [],
               )
               if np.issubdtype(np_dtype, np.integer):
                   return INT_STR_TO_DTYPE[str(np_dtype)]
               elif np.issubdtype(np_dtype, np.floating):
                   from pandas.core.arrays.floating import FLOAT_STR_TO_DTYPE
       
                   return FLOAT_STR_TO_DTYPE[str(np_dtype)]
               return None
       
       
    1: def safe_cast(values, dtype, copy: bool):
           """
           Safely cast the values to the dtype if they
           are equivalent, meaning floats must be equivalent to the
           ints.
           """
           try:
               return values.astype(dtype, casting="safe", copy=copy)
           except TypeError as err:
               casted = values.astype(dtype, copy=copy)
               if (casted == values).all():
                   return casted
       
               raise TypeError(
                   f"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}"
               ) from err
       
       
    1: def coerce_to_array(
           values, dtype, mask=None, copy: bool = False
       ) -> tuple[np.ndarray, np.ndarray]:
           """
           Coerce the input values array to numpy arrays with a mask.
       
           Parameters
           ----------
           values : 1D list-like
           dtype : integer dtype
           mask : bool 1D array, optional
           copy : bool, default False
               if True, copy the input
       
           Returns
           -------
           tuple of (values, mask)
           """
           # if values is integer numpy array, preserve its dtype
           if dtype is None and hasattr(values, "dtype"):
               if is_integer_dtype(values.dtype):
                   dtype = values.dtype
       
           if dtype is not None:
               if isinstance(dtype, str) and (
                   dtype.startswith("Int") or dtype.startswith("UInt")
               ):
                   # Avoid DeprecationWarning from NumPy about np.dtype("Int64")
                   # https://github.com/numpy/numpy/pull/7476
                   dtype = dtype.lower()
       
               if not issubclass(type(dtype), _IntegerDtype):
                   try:
                       dtype = INT_STR_TO_DTYPE[str(np.dtype(dtype))]
                   except KeyError as err:
                       raise ValueError(f"invalid dtype specified {dtype}") from err
       
           if isinstance(values, IntegerArray):
               values, mask = values._data, values._mask
               if dtype is not None:
                   values = values.astype(dtype.numpy_dtype, copy=False)
       
               if copy:
                   values = values.copy()
                   mask = mask.copy()
               return values, mask
       
           values = np.array(values, copy=copy)
           inferred_type = None
           if is_object_dtype(values.dtype) or is_string_dtype(values.dtype):
               inferred_type = lib.infer_dtype(values, skipna=True)
               if inferred_type == "empty":
                   pass
               elif inferred_type not in [
                   "floating",
                   "integer",
                   "mixed-integer",
                   "integer-na",
                   "mixed-integer-float",
                   "string",
                   "unicode",
               ]:
                   raise TypeError(f"{values.dtype} cannot be converted to an IntegerDtype")
       
           elif is_bool_dtype(values) and is_integer_dtype(dtype):
               values = np.array(values, dtype=int, copy=copy)
       
           elif not (is_integer_dtype(values) or is_float_dtype(values)):
               raise TypeError(f"{values.dtype} cannot be converted to an IntegerDtype")
       
           if values.ndim != 1:
               raise TypeError("values must be a 1D list-like")
       
           if mask is None:
               mask = libmissing.is_numeric_na(values)
           else:
               assert len(mask) == len(values)
       
           if mask.ndim != 1:
               raise TypeError("mask must be a 1D list-like")
       
           # infer dtype if needed
           if dtype is None:
               dtype = np.dtype("int64")
           else:
               dtype = dtype.type
       
           # if we are float, let's make sure that we can
           # safely cast
       
           # we copy as need to coerce here
           if mask.any():
               values = values.copy()
               values[mask] = 1
           if inferred_type in ("string", "unicode"):
               # casts from str are always safe since they raise
               # a ValueError if the str cannot be parsed into an int
               values = values.astype(dtype, copy=copy)
           else:
               values = safe_cast(values, dtype, copy=False)
       
           return values, mask
       
       
    2: class IntegerArray(NumericArray):
    1:     """
           Array of integer (optional missing) values.
       
           .. versionchanged:: 1.0.0
       
              Now uses :attr:`pandas.NA` as the missing value rather
              than :attr:`numpy.nan`.
       
           .. warning::
       
              IntegerArray is currently experimental, and its API or internal
              implementation may change without warning.
       
           We represent an IntegerArray with 2 numpy arrays:
       
           - data: contains a numpy integer array of the appropriate dtype
           - mask: a boolean array holding a mask on the data, True is missing
       
           To construct an IntegerArray from generic array-like input, use
           :func:`pandas.array` with one of the integer dtypes (see examples).
       
           See :ref:`integer_na` for more.
       
           Parameters
           ----------
           values : numpy.ndarray
               A 1-d integer-dtype array.
           mask : numpy.ndarray
               A 1-d boolean-dtype array indicating missing values.
           copy : bool, default False
               Whether to copy the `values` and `mask`.
       
           Attributes
           ----------
           None
       
           Methods
           -------
           None
       
           Returns
           -------
           IntegerArray
       
           Examples
           --------
           Create an IntegerArray with :func:`pandas.array`.
       
           >>> int_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())
           >>> int_array
           <IntegerArray>
           [1, <NA>, 3]
           Length: 3, dtype: Int32
       
           String aliases for the dtypes are also available. They are capitalized.
       
           >>> pd.array([1, None, 3], dtype='Int32')
           <IntegerArray>
           [1, <NA>, 3]
           Length: 3, dtype: Int32
       
           >>> pd.array([1, None, 3], dtype='UInt16')
           <IntegerArray>
           [1, <NA>, 3]
           Length: 3, dtype: UInt16
           """
       
           # The value used to fill '_data' to avoid upcasting
    1:     _internal_fill_value = 1
           # Fill values used for any/all
    1:     _truthy_value = 1
    1:     _falsey_value = 0
       
    1:     @cache_readonly
    1:     def dtype(self) -> _IntegerDtype:
               return INT_STR_TO_DTYPE[str(self._data.dtype)]
       
    1:     def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):
               if not (isinstance(values, np.ndarray) and values.dtype.kind in ["i", "u"]):
                   raise TypeError(
                       "values should be integer numpy array. Use "
                       "the 'pd.array' function instead"
                   )
               super().__init__(values, mask, copy=copy)
       
    1:     @classmethod
    1:     def _from_sequence(
    1:         cls, scalars, *, dtype: Dtype | None = None, copy: bool = False
           ) -> IntegerArray:
               values, mask = coerce_to_array(scalars, dtype=dtype, copy=copy)
               return IntegerArray(values, mask)
       
    1:     @classmethod
    1:     def _from_sequence_of_strings(
    1:         cls, strings, *, dtype: Dtype | None = None, copy: bool = False
           ) -> IntegerArray:
               scalars = to_numeric(strings, errors="raise")
               return cls._from_sequence(scalars, dtype=dtype, copy=copy)
       
    1:     def _coerce_to_array(self, value) -> tuple[np.ndarray, np.ndarray]:
               return coerce_to_array(value, dtype=self.dtype)
       
    1:     @overload
    1:     def astype(self, dtype: npt.DTypeLike, copy: bool = ...) -> np.ndarray:
               ...
       
    1:     @overload
    1:     def astype(self, dtype: ExtensionDtype, copy: bool = ...) -> ExtensionArray:
               ...
       
    1:     @overload
    1:     def astype(self, dtype: AstypeArg, copy: bool = ...) -> ArrayLike:
               ...
       
    1:     def astype(self, dtype: AstypeArg, copy: bool = True) -> ArrayLike:
               """
               Cast to a NumPy array or ExtensionArray with 'dtype'.
       
               Parameters
               ----------
               dtype : str or dtype
                   Typecode or data-type to which the array is cast.
               copy : bool, default True
                   Whether to copy the data, even if not necessary. If False,
                   a copy is made only if the old dtype does not match the
                   new dtype.
       
               Returns
               -------
               ndarray or ExtensionArray
                   NumPy ndarray, BooleanArray or IntegerArray with 'dtype' for its dtype.
       
               Raises
               ------
               TypeError
                   if incompatible type with an IntegerDtype, equivalent of same_kind
                   casting
               """
               dtype = pandas_dtype(dtype)
       
               if isinstance(dtype, ExtensionDtype):
                   return super().astype(dtype, copy=copy)
       
               na_value: float | np.datetime64 | lib.NoDefault
       
               # coerce
               if is_float_dtype(dtype):
                   # In astype, we consider dtype=float to also mean na_value=np.nan
                   na_value = np.nan
               elif is_datetime64_dtype(dtype):
                   na_value = np.datetime64("NaT")
               else:
                   na_value = lib.no_default
       
               return self.to_numpy(dtype=dtype, na_value=na_value, copy=False)
       
    1:     def _values_for_argsort(self) -> np.ndarray:
               """
               Return values for sorting.
       
               Returns
               -------
               ndarray
                   The transformed values should maintain the ordering between values
                   within the array.
       
               See Also
               --------
               ExtensionArray.argsort : Return the indices that would sort this array.
               """
               data = self._data.copy()
               if self._mask.any():
                   data[self._mask] = data.min() - 1
               return data
       
       
    1: _dtype_docstring = """
       An ExtensionDtype for {dtype} integer data.
       
       .. versionchanged:: 1.0.0
       
          Now uses :attr:`pandas.NA` as its missing value,
          rather than :attr:`numpy.nan`.
       
       Attributes
       ----------
       None
       
       Methods
       -------
       None
       """
       
       # create the Dtype
       
       
    2: @register_extension_dtype
    1: class Int8Dtype(_IntegerDtype):
    1:     type = np.int8
    1:     name = "Int8"
    1:     __doc__ = _dtype_docstring.format(dtype="int8")
       
       
    2: @register_extension_dtype
    1: class Int16Dtype(_IntegerDtype):
    1:     type = np.int16
    1:     name = "Int16"
    1:     __doc__ = _dtype_docstring.format(dtype="int16")
       
       
    2: @register_extension_dtype
    1: class Int32Dtype(_IntegerDtype):
    1:     type = np.int32
    1:     name = "Int32"
    1:     __doc__ = _dtype_docstring.format(dtype="int32")
       
       
    2: @register_extension_dtype
    1: class Int64Dtype(_IntegerDtype):
    1:     type = np.int64
    1:     name = "Int64"
    1:     __doc__ = _dtype_docstring.format(dtype="int64")
       
       
    2: @register_extension_dtype
    1: class UInt8Dtype(_IntegerDtype):
    1:     type = np.uint8
    1:     name = "UInt8"
    1:     __doc__ = _dtype_docstring.format(dtype="uint8")
       
       
    2: @register_extension_dtype
    1: class UInt16Dtype(_IntegerDtype):
    1:     type = np.uint16
    1:     name = "UInt16"
    1:     __doc__ = _dtype_docstring.format(dtype="uint16")
       
       
    2: @register_extension_dtype
    1: class UInt32Dtype(_IntegerDtype):
    1:     type = np.uint32
    1:     name = "UInt32"
    1:     __doc__ = _dtype_docstring.format(dtype="uint32")
       
       
    2: @register_extension_dtype
    1: class UInt64Dtype(_IntegerDtype):
    1:     type = np.uint64
    1:     name = "UInt64"
    1:     __doc__ = _dtype_docstring.format(dtype="uint64")
       
       
    1: INT_STR_TO_DTYPE: dict[str, _IntegerDtype] = {
    1:     "int8": Int8Dtype(),
    1:     "int16": Int16Dtype(),
    1:     "int32": Int32Dtype(),
    1:     "int64": Int64Dtype(),
    1:     "uint8": UInt8Dtype(),
    1:     "uint16": UInt16Dtype(),
    1:     "uint32": UInt32Dtype(),
    1:     "uint64": UInt64Dtype(),
       }
